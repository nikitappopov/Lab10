
LAB10_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003058  08003058  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003058  08003058  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003058  08003058  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  080030d0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080030d0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b09  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2c  00000000  00000000  00026ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  000285d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  00028da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001716d  00000000  00000000  000294c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bee  00000000  00000000  00040635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a16  00000000  00000000  00049223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cbc39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000224c  00000000  00000000  000cbc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ea0 	.word	0x08002ea0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002ea0 	.word	0x08002ea0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08c      	sub	sp, #48	; 0x30
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb3d 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8af 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f91f 	bl	80003ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016e:	f000 f8f3 	bl	8000358 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000172:	f000 f8e4 	bl	800033e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  uint32_t SIZE_ONE_PAGE = 0x400; // розмір сторінки 1 Кб, або 1024 байта
 8000176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017a:	62fb      	str	r3, [r7, #44]	; 0x2c
  	uint32_t ADDR_FLASH_PAGE = 0x08000000 + 64 * SIZE_ONE_PAGE; // адреса 64 сторінки 0x0800FC00
 800017c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800017e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8000182:	019b      	lsls	r3, r3, #6
 8000184:	62bb      	str	r3, [r7, #40]	; 0x28

  	size_t SIZE_uint32 = sizeof(uint32_t); // 32 біта це 4 байти
 8000186:	2304      	movs	r3, #4
 8000188:	627b      	str	r3, [r7, #36]	; 0x24
  	// в одну сторінку розміром 1Кб можна записати 1024/4=256 змінних розміром 4 байти

  	uint32_t val_000 = 0x01234567;
 800018a:	4b47      	ldr	r3, [pc, #284]	; (80002a8 <main+0x14c>)
 800018c:	623b      	str	r3, [r7, #32]
  	uint32_t val_004 = 0x89ABCDEF;
 800018e:	4b47      	ldr	r3, [pc, #284]	; (80002ac <main+0x150>)
 8000190:	61fb      	str	r3, [r7, #28]
  	uint32_t val_00C = 0x01020304;
 8000192:	4b47      	ldr	r3, [pc, #284]	; (80002b0 <main+0x154>)
 8000194:	61bb      	str	r3, [r7, #24]
  	uint32_t val_3FC = 0x0000FFFF; //1024-4=1020 == 0x400-0x004=0x3FC
 8000196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800019a:	617b      	str	r3, [r7, #20]

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 64!!!\n\r", sizeof("\n\n\r!!!Erase page 64!!!\n\r"), 100);
 800019c:	2364      	movs	r3, #100	; 0x64
 800019e:	2219      	movs	r2, #25
 80001a0:	4944      	ldr	r1, [pc, #272]	; (80002b4 <main+0x158>)
 80001a2:	4845      	ldr	r0, [pc, #276]	; (80002b8 <main+0x15c>)
 80001a4:	f001 fd31 	bl	8001c0a <HAL_UART_Transmit>
  	Flash_Erase_One_Page(ADDR_FLASH_PAGE); // очищення 64 сторінки
 80001a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80001aa:	f000 f915 	bl	80003d8 <Flash_Erase_One_Page>

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 80001ae:	2364      	movs	r3, #100	; 0x64
 80001b0:	220f      	movs	r2, #15
 80001b2:	4942      	ldr	r1, [pc, #264]	; (80002bc <main+0x160>)
 80001b4:	4840      	ldr	r0, [pc, #256]	; (80002b8 <main+0x15c>)
 80001b6:	f001 fd28 	bl	8001c0a <HAL_UART_Transmit>
  	// запис значень на початку і в кінці 127 сторінки
  	Flash_Write_uint32(ADDR_FLASH_PAGE + 0 * SIZE_uint32, val_000);
 80001ba:	6a39      	ldr	r1, [r7, #32]
 80001bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80001be:	f000 f969 	bl	8000494 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE + 1 * SIZE_uint32, val_004);
 80001c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c6:	4413      	add	r3, r2
 80001c8:	69f9      	ldr	r1, [r7, #28]
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 f962 	bl	8000494 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE + 3 * SIZE_uint32, val_00C);
 80001d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80001d2:	4613      	mov	r3, r2
 80001d4:	005b      	lsls	r3, r3, #1
 80001d6:	441a      	add	r2, r3
 80001d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001da:	4413      	add	r3, r2
 80001dc:	69b9      	ldr	r1, [r7, #24]
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 f958 	bl	8000494 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE + 255 * SIZE_uint32, val_3FC);
 80001e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80001e6:	4613      	mov	r3, r2
 80001e8:	021b      	lsls	r3, r3, #8
 80001ea:	1a9a      	subs	r2, r3, r2
 80001ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001ee:	4413      	add	r3, r2
 80001f0:	6979      	ldr	r1, [r7, #20]
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 f94e 	bl	8000494 <Flash_Write_uint32>

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Erase page 63!!!\n\r", sizeof("\n!!!Erase page 63!!!\n\r"), 100);
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	2217      	movs	r2, #23
 80001fc:	4930      	ldr	r1, [pc, #192]	; (80002c0 <main+0x164>)
 80001fe:	482e      	ldr	r0, [pc, #184]	; (80002b8 <main+0x15c>)
 8000200:	f001 fd03 	bl	8001c0a <HAL_UART_Transmit>
  	Flash_Erase_One_Page(ADDR_FLASH_PAGE - SIZE_ONE_PAGE); // очищення 63 сторінки
 8000204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000208:	1ad3      	subs	r3, r2, r3
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f8e4 	bl	80003d8 <Flash_Erase_One_Page>

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 8000210:	2364      	movs	r3, #100	; 0x64
 8000212:	220f      	movs	r2, #15
 8000214:	4929      	ldr	r1, [pc, #164]	; (80002bc <main+0x160>)
 8000216:	4828      	ldr	r0, [pc, #160]	; (80002b8 <main+0x15c>)
 8000218:	f001 fcf7 	bl	8001c0a <HAL_UART_Transmit>
  	// запис значень на початку і в кінці 126 сторінки
  	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x000, val_000);
 800021c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800021e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000220:	1ad3      	subs	r3, r2, r3
 8000222:	6a39      	ldr	r1, [r7, #32]
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f935 	bl	8000494 <Flash_Write_uint32>
  Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x004, val_004);
 800022a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800022c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800022e:	1ad3      	subs	r3, r2, r3
 8000230:	3304      	adds	r3, #4
 8000232:	69f9      	ldr	r1, [r7, #28]
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f92d 	bl	8000494 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x00C, val_00C);
 800023a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800023c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	330c      	adds	r3, #12
 8000242:	69b9      	ldr	r1, [r7, #24]
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f925 	bl	8000494 <Flash_Write_uint32>
  	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x3FC, val_3FC);
 800024a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800024e:	1ad3      	subs	r3, r2, r3
 8000250:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8000254:	6979      	ldr	r1, [r7, #20]
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f91c 	bl	8000494 <Flash_Write_uint32>

  	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Read!!!\n\r", sizeof("\n!!!Read!!!\n\r"), 100);
 800025c:	2364      	movs	r3, #100	; 0x64
 800025e:	220e      	movs	r2, #14
 8000260:	4918      	ldr	r1, [pc, #96]	; (80002c4 <main+0x168>)
 8000262:	4815      	ldr	r0, [pc, #84]	; (80002b8 <main+0x15c>)
 8000264:	f001 fcd1 	bl	8001c0a <HAL_UART_Transmit>
  	// читання значень з 64 сторінки Flash-пам'яті
  	uint32_t a = Flash_Read_uint32(ADDR_FLASH_PAGE + 0 * SIZE_uint32);
 8000268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800026a:	f000 f96b 	bl	8000544 <Flash_Read_uint32>
 800026e:	6138      	str	r0, [r7, #16]
  	uint32_t b = Flash_Read_uint32(ADDR_FLASH_PAGE + 1 * SIZE_uint32);
 8000270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000274:	4413      	add	r3, r2
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f964 	bl	8000544 <Flash_Read_uint32>
 800027c:	60f8      	str	r0, [r7, #12]
  	uint32_t c = Flash_Read_uint32(ADDR_FLASH_PAGE + 3 * SIZE_uint32);
 800027e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000280:	4613      	mov	r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	441a      	add	r2, r3
 8000286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000288:	4413      	add	r3, r2
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f95a 	bl	8000544 <Flash_Read_uint32>
 8000290:	60b8      	str	r0, [r7, #8]
  	uint32_t d = Flash_Read_uint32(ADDR_FLASH_PAGE + 255 * SIZE_uint32);
 8000292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000294:	4613      	mov	r3, r2
 8000296:	021b      	lsls	r3, r3, #8
 8000298:	1a9a      	subs	r2, r3, r2
 800029a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800029c:	4413      	add	r3, r2
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 f950 	bl	8000544 <Flash_Read_uint32>
 80002a4:	6078      	str	r0, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <main+0x14a>
 80002a8:	01234567 	.word	0x01234567
 80002ac:	89abcdef 	.word	0x89abcdef
 80002b0:	01020304 	.word	0x01020304
 80002b4:	08002eb8 	.word	0x08002eb8
 80002b8:	2000008c 	.word	0x2000008c
 80002bc:	08002ed4 	.word	0x08002ed4
 80002c0:	08002ee4 	.word	0x08002ee4
 80002c4:	08002efc 	.word	0x08002efc

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b090      	sub	sp, #64	; 0x40
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 f94c 	bl	8002574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	2310      	movs	r3, #16
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 f81c 	bl	800133c <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800030a:	f000 f961 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fa8a 	bl	8001840 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000332:	f000 f94d 	bl	80005d0 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	; 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	2100      	movs	r1, #0
 8000346:	2025      	movs	r0, #37	; 0x25
 8000348:	f000 fb83 	bl	8000a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800034c:	2025      	movs	r0, #37	; 0x25
 800034e:	f000 fb9c 	bl	8000a8a <HAL_NVIC_EnableIRQ>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 800035e:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <MX_USART1_UART_Init+0x50>)
 8000360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000364:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 800037e:	220c      	movs	r2, #12
 8000380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 800038a:	2200      	movs	r2, #0
 800038c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000390:	f001 fbee 	bl	8001b70 <HAL_UART_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800039a:	f000 f919 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	2000008c 	.word	0x2000008c
 80003a8:	40013800 	.word	0x40013800

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <MX_GPIO_Init+0x28>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <MX_GPIO_Init+0x28>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <MX_GPIO_Init+0x28>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0304 	and.w	r3, r3, #4
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000

080003d8 <Flash_Erase_One_Page>:

/* USER CODE BEGIN 4 */
void Flash_Erase_One_Page(uint32_t MYADDR)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b09a      	sub	sp, #104	; 0x68
 80003dc:	af02      	add	r7, sp, #8
 80003de:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct; // структура для очищення флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // очищення сторінками, FLASH_TYPEERASE_MASSERASE - очищення всього флеша
 80003e0:	2300      	movs	r3, #0
 80003e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	EraseInitStruct.PageAddress = MYADDR; // адреса сторінки;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	657b      	str	r3, [r7, #84]	; 0x54
	EraseInitStruct.NbPages = 1;          // кількість сторінок для очищення
 80003e8:	2301      	movs	r3, #1
 80003ea:	65bb      	str	r3, [r7, #88]	; 0x58
	//EraseInitStruct.Banks = FLASH_BANK_1; // для більш потужник МК ніж STM32F103



	uint32_t page_error = 0; // змінна в яку запишеться адреса сторінки, при невдалому очищенні
 80003ec:	2300      	movs	r3, #0
 80003ee:	64bb      	str	r3, [r7, #72]	; 0x48

	char str[64] = { 0, };
 80003f0:	2300      	movs	r3, #0
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	223c      	movs	r2, #60	; 0x3c
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f002 f8b9 	bl	8002574 <memset>

	//////// ОЧИЩЕННЯ Flash-пам'яті ////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 8000402:	f000 fc7d 	bl	8000d00 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8000406:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800040a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f000 fd67 	bl	8000ee4 <HAL_FLASHEx_Erase>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d017      	beq.n	800044c <Flash_Erase_One_Page+0x74>
	{
		// сталась помилка при очищенні сторінки
		uint32_t er = HAL_FLASH_GetError();
 800041c:	f000 fca6 	bl	8000d6c <HAL_FLASH_GetError>
 8000420:	65f8      	str	r0, [r7, #92]	; 0x5c
		snprintf(str, 64, "Error Flash_Erase(): %lu\n\r", er);
 8000422:	f107 0008 	add.w	r0, r7, #8
 8000426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000428:	4a17      	ldr	r2, [pc, #92]	; (8000488 <Flash_Erase_One_Page+0xb0>)
 800042a:	2140      	movs	r1, #64	; 0x40
 800042c:	f002 f8aa 	bl	8002584 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000430:	f107 0308 	add.w	r3, r7, #8
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fe89 	bl	800014c <strlen>
 800043a:	4603      	mov	r3, r0
 800043c:	b29a      	uxth	r2, r3
 800043e:	f107 0108 	add.w	r1, r7, #8
 8000442:	2364      	movs	r3, #100	; 0x64
 8000444:	4811      	ldr	r0, [pc, #68]	; (800048c <Flash_Erase_One_Page+0xb4>)
 8000446:	f001 fbe0 	bl	8001c0a <HAL_UART_Transmit>
		while (1)
 800044a:	e7fe      	b.n	800044a <Flash_Erase_One_Page+0x72>
		{
		}
	}

	// очищення сторінки виконане успішно
	snprintf(str, 64, "Erase Flash from address 0x%08lX to address 0x%08lX OK\n\r", MYADDR, MYADDR+0x400-1);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000452:	f107 0008 	add.w	r0, r7, #8
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <Flash_Erase_One_Page+0xb8>)
 800045c:	2140      	movs	r1, #64	; 0x40
 800045e:	f002 f891 	bl	8002584 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000462:	f107 0308 	add.w	r3, r7, #8
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff fe70 	bl	800014c <strlen>
 800046c:	4603      	mov	r3, r0
 800046e:	b29a      	uxth	r2, r3
 8000470:	f107 0108 	add.w	r1, r7, #8
 8000474:	2364      	movs	r3, #100	; 0x64
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <Flash_Erase_One_Page+0xb4>)
 8000478:	f001 fbc7 	bl	8001c0a <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 800047c:	f000 fc66 	bl	8000d4c <HAL_FLASH_Lock>
}
 8000480:	bf00      	nop
 8000482:	3760      	adds	r7, #96	; 0x60
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	08002f0c 	.word	0x08002f0c
 800048c:	2000008c 	.word	0x2000008c
 8000490:	08002f28 	.word	0x08002f28

08000494 <Flash_Write_uint32>:


void Flash_Write_uint32(uint32_t MYADDR, uint32_t val)
{
 8000494:	b5b0      	push	{r4, r5, r7, lr}
 8000496:	b096      	sub	sp, #88	; 0x58
 8000498:	af02      	add	r7, sp, #8
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
	char str[64] = { 0, };
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	223c      	movs	r2, #60	; 0x3c
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 f862 	bl	8002574 <memset>

	///////////// ЗАПИС у Flash-пам'ять ///////////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 80004b0:	f000 fc26 	bl	8000d00 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, MYADDR, val) != HAL_OK)
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	2200      	movs	r2, #0
 80004b8:	461c      	mov	r4, r3
 80004ba:	4615      	mov	r5, r2
 80004bc:	4622      	mov	r2, r4
 80004be:	462b      	mov	r3, r5
 80004c0:	6879      	ldr	r1, [r7, #4]
 80004c2:	2002      	movs	r0, #2
 80004c4:	f000 fbac 	bl	8000c20 <HAL_FLASH_Program>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d017      	beq.n	80004fe <Flash_Write_uint32+0x6a>
	{
		uint32_t er = HAL_FLASH_GetError();
 80004ce:	f000 fc4d 	bl	8000d6c <HAL_FLASH_GetError>
 80004d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 80004d4:	f107 000c 	add.w	r0, r7, #12
 80004d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004da:	4a17      	ldr	r2, [pc, #92]	; (8000538 <Flash_Write_uint32+0xa4>)
 80004dc:	2140      	movs	r1, #64	; 0x40
 80004de:	f002 f851 	bl	8002584 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff fe30 	bl	800014c <strlen>
 80004ec:	4603      	mov	r3, r0
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	f107 010c 	add.w	r1, r7, #12
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	4811      	ldr	r0, [pc, #68]	; (800053c <Flash_Write_uint32+0xa8>)
 80004f8:	f001 fb87 	bl	8001c0a <HAL_UART_Transmit>
		while (1)
 80004fc:	e7fe      	b.n	80004fc <Flash_Write_uint32+0x68>
		{
		}
	}

	snprintf(str, 64, "Write 32 bits (Hex: 0x%08lX) to address 0x%08lX OK\n\r", val, MYADDR);
 80004fe:	f107 000c 	add.w	r0, r7, #12
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <Flash_Write_uint32+0xac>)
 800050a:	2140      	movs	r1, #64	; 0x40
 800050c:	f002 f83a 	bl	8002584 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fe19 	bl	800014c <strlen>
 800051a:	4603      	mov	r3, r0
 800051c:	b29a      	uxth	r2, r3
 800051e:	f107 010c 	add.w	r1, r7, #12
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <Flash_Write_uint32+0xa8>)
 8000526:	f001 fb70 	bl	8001c0a <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 800052a:	f000 fc0f 	bl	8000d4c <HAL_FLASH_Lock>
}
 800052e:	bf00      	nop
 8000530:	3750      	adds	r7, #80	; 0x50
 8000532:	46bd      	mov	sp, r7
 8000534:	bdb0      	pop	{r4, r5, r7, pc}
 8000536:	bf00      	nop
 8000538:	08002f64 	.word	0x08002f64
 800053c:	2000008c 	.word	0x2000008c
 8000540:	08002f80 	.word	0x08002f80

08000544 <Flash_Read_uint32>:

uint32_t Flash_Read_uint32(uint32_t MYADDR)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	; 0x58
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
	char str[64] = { 0, };
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	223c      	movs	r2, #60	; 0x3c
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f002 f80b 	bl	8002574 <memset>

	/////////////// ЧИТАЄМО Flash-пам'ять ///////////////////
	uint32_t dig32 = *(uint32_t*) MYADDR; // читання числа за його адресою
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	64fb      	str	r3, [r7, #76]	; 0x4c

	snprintf(str, 64, "Read 32 bits (Dec: %lu \tHex: 0x%08lX)", dig32, dig32);
 8000564:	f107 000c 	add.w	r0, r7, #12
 8000568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800056e:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <Flash_Read_uint32+0x80>)
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	f002 f807 	bl	8002584 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fde6 	bl	800014c <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	f107 010c 	add.w	r1, r7, #12
 8000588:	2364      	movs	r3, #100	; 0x64
 800058a:	480f      	ldr	r0, [pc, #60]	; (80005c8 <Flash_Read_uint32+0x84>)
 800058c:	f001 fb3d 	bl	8001c0a <HAL_UART_Transmit>
	snprintf(str, 64, " from address 0x%08lX \n\r", MYADDR);
 8000590:	f107 000c 	add.w	r0, r7, #12
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <Flash_Read_uint32+0x88>)
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	f001 fff3 	bl	8002584 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fdd2 	bl	800014c <strlen>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <Flash_Read_uint32+0x84>)
 80005b4:	f001 fb29 	bl	8001c0a <HAL_UART_Transmit>

	return dig32;
 80005b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3750      	adds	r7, #80	; 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	08002fb8 	.word	0x08002fb8
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	08002fe0 	.word	0x08002fe0

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <HAL_MspInit+0x40>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a0d      	ldr	r2, [pc, #52]	; (800061c <HAL_MspInit+0x40>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_MspInit+0x40>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_MspInit+0x40>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_MspInit+0x40>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_MspInit+0x40>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <HAL_UART_MspInit+0x8c>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d131      	bne.n	80006a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_UART_MspInit+0x90>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_UART_MspInit+0x90>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <HAL_UART_MspInit+0x90>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067a:	2303      	movs	r3, #3
 800067c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <HAL_UART_MspInit+0x94>)
 8000686:	f000 fcd5 	bl	8001034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800068a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_UART_MspInit+0x94>)
 80006a0:	f000 fcc8 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fe:	f000 f8b5 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <USART1_IRQHandler+0x10>)
 800070e:	f001 fb0f 	bl	8001d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000008c 	.word	0x2000008c

0800071c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000724:	4a14      	ldr	r2, [pc, #80]	; (8000778 <_sbrk+0x5c>)
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <_sbrk+0x60>)
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <_sbrk+0x64>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <_sbrk+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <_sbrk+0x64>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	429a      	cmp	r2, r3
 800074a:	d207      	bcs.n	800075c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800074c:	f001 fee8 	bl	8002520 <__errno>
 8000750:	4603      	mov	r3, r0
 8000752:	220c      	movs	r2, #12
 8000754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	e009      	b.n	8000770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <_sbrk+0x64>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <_sbrk+0x64>)
 800076c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800076e:	68fb      	ldr	r3, [r7, #12]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20005000 	.word	0x20005000
 800077c:	00000400 	.word	0x00000400
 8000780:	200000d0 	.word	0x200000d0
 8000784:	20000108 	.word	0x20000108

08000788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000796:	490d      	ldr	r1, [pc, #52]	; (80007cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007ac:	4c0a      	ldr	r4, [pc, #40]	; (80007d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ba:	f7ff ffe5 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007be:	f001 feb5 	bl	800252c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c2:	f7ff fccb 	bl	800015c <main>
  bx lr
 80007c6:	4770      	bx	lr
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007d0:	08003060 	.word	0x08003060
  ldr r2, =_sbss
 80007d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007d8:	20000108 	.word	0x20000108

080007dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_2_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_Init+0x28>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_Init+0x28>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 f923 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f6:	200f      	movs	r0, #15
 80007f8:	f000 f808 	bl	800080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fc:	f7ff feee 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40022000 	.word	0x40022000

0800080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x54>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x58>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	fbb3 f3f1 	udiv	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f93b 	bl	8000aa6 <HAL_SYSTICK_Config>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e00e      	b.n	8000858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d80a      	bhi.n	8000856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 f903 	bl	8000a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_InitTick+0x5c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000000 	.word	0x20000000
 8000864:	20000008 	.word	0x20000008
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x1c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x20>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a03      	ldr	r2, [pc, #12]	; (800088c <HAL_IncTick+0x20>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	20000008 	.word	0x20000008
 800088c:	200000d4 	.word	0x200000d4

08000890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <HAL_GetTick+0x10>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	200000d4 	.word	0x200000d4

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	db0b      	blt.n	8000932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 021f 	and.w	r2, r3, #31
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <__NVIC_EnableIRQ+0x34>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	2001      	movs	r0, #1
 800092a:	fa00 f202 	lsl.w	r2, r0, r2
 800092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	e000e100 	.word	0xe000e100

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	; (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	; 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ff90 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff2d 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a64:	f7ff ff42 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff ff90 	bl	8000994 <NVIC_EncodePriority>
 8000a74:	4602      	mov	r2, r0
 8000a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5f 	bl	8000940 <__NVIC_SetPriority>
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff35 	bl	8000908 <__NVIC_EnableIRQ>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa2 	bl	80009f8 <SysTick_Config>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d008      	beq.n	8000ae6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e020      	b.n	8000b28 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 020e 	bic.w	r2, r2, #14
 8000af4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b0e:	2101      	movs	r1, #1
 8000b10:	fa01 f202 	lsl.w	r2, r1, r2
 8000b14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
	...

08000b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d005      	beq.n	8000b56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e051      	b.n	8000bfa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 020e 	bic.w	r2, r2, #14
 8000b64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 0201 	bic.w	r2, r2, #1
 8000b74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a22      	ldr	r2, [pc, #136]	; (8000c04 <HAL_DMA_Abort_IT+0xd0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d029      	beq.n	8000bd4 <HAL_DMA_Abort_IT+0xa0>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a20      	ldr	r2, [pc, #128]	; (8000c08 <HAL_DMA_Abort_IT+0xd4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d022      	beq.n	8000bd0 <HAL_DMA_Abort_IT+0x9c>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <HAL_DMA_Abort_IT+0xd8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d01a      	beq.n	8000bca <HAL_DMA_Abort_IT+0x96>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <HAL_DMA_Abort_IT+0xdc>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d012      	beq.n	8000bc4 <HAL_DMA_Abort_IT+0x90>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <HAL_DMA_Abort_IT+0xe0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d00a      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x8a>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <HAL_DMA_Abort_IT+0xe4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d102      	bne.n	8000bb8 <HAL_DMA_Abort_IT+0x84>
 8000bb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bb6:	e00e      	b.n	8000bd6 <HAL_DMA_Abort_IT+0xa2>
 8000bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bbc:	e00b      	b.n	8000bd6 <HAL_DMA_Abort_IT+0xa2>
 8000bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc2:	e008      	b.n	8000bd6 <HAL_DMA_Abort_IT+0xa2>
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	e005      	b.n	8000bd6 <HAL_DMA_Abort_IT+0xa2>
 8000bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bce:	e002      	b.n	8000bd6 <HAL_DMA_Abort_IT+0xa2>
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	e000      	b.n	8000bd6 <HAL_DMA_Abort_IT+0xa2>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <HAL_DMA_Abort_IT+0xe8>)
 8000bd8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	4798      	blx	r3
    } 
  }
  return status;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40020008 	.word	0x40020008
 8000c08:	4002001c 	.word	0x4002001c
 8000c0c:	40020030 	.word	0x40020030
 8000c10:	40020044 	.word	0x40020044
 8000c14:	40020058 	.word	0x40020058
 8000c18:	4002006c 	.word	0x4002006c
 8000c1c:	40020000 	.word	0x40020000

08000c20 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <HAL_FLASH_Program+0xd8>)
 8000c3c:	7e1b      	ldrb	r3, [r3, #24]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d101      	bne.n	8000c46 <HAL_FLASH_Program+0x26>
 8000c42:	2302      	movs	r3, #2
 8000c44:	e054      	b.n	8000cf0 <HAL_FLASH_Program+0xd0>
 8000c46:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <HAL_FLASH_Program+0xd8>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c50:	f000 f8b2 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000c54:	4603      	mov	r3, r0
 8000c56:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d144      	bne.n	8000ce8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d102      	bne.n	8000c6a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c64:	2301      	movs	r3, #1
 8000c66:	757b      	strb	r3, [r7, #21]
 8000c68:	e007      	b.n	8000c7a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d102      	bne.n	8000c76 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000c70:	2302      	movs	r3, #2
 8000c72:	757b      	strb	r3, [r7, #21]
 8000c74:	e001      	b.n	8000c7a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000c76:	2304      	movs	r3, #4
 8000c78:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	75bb      	strb	r3, [r7, #22]
 8000c7e:	e02d      	b.n	8000cdc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c80:	7dbb      	ldrb	r3, [r7, #22]
 8000c82:	005a      	lsls	r2, r3, #1
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	eb02 0c03 	add.w	ip, r2, r3
 8000c8a:	7dbb      	ldrb	r3, [r7, #22]
 8000c8c:	0119      	lsls	r1, r3, #4
 8000c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c92:	f1c1 0620 	rsb	r6, r1, #32
 8000c96:	f1a1 0020 	sub.w	r0, r1, #32
 8000c9a:	fa22 f401 	lsr.w	r4, r2, r1
 8000c9e:	fa03 f606 	lsl.w	r6, r3, r6
 8000ca2:	4334      	orrs	r4, r6
 8000ca4:	fa23 f000 	lsr.w	r0, r3, r0
 8000ca8:	4304      	orrs	r4, r0
 8000caa:	fa23 f501 	lsr.w	r5, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4660      	mov	r0, ip
 8000cb4:	f000 f864 	bl	8000d80 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cbc:	f000 f87c 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_FLASH_Program+0xdc>)
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <HAL_FLASH_Program+0xdc>)
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d107      	bne.n	8000ce6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000cd6:	7dbb      	ldrb	r3, [r7, #22]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	75bb      	strb	r3, [r7, #22]
 8000cdc:	7dba      	ldrb	r2, [r7, #22]
 8000cde:	7d7b      	ldrb	r3, [r7, #21]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3cd      	bcc.n	8000c80 <HAL_FLASH_Program+0x60>
 8000ce4:	e000      	b.n	8000ce8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000ce6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_FLASH_Program+0xd8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	761a      	strb	r2, [r3, #24]

  return status;
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	371c      	adds	r7, #28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf8:	200000d8 	.word	0x200000d8
 8000cfc:	40022000 	.word	0x40022000

08000d00 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_FLASH_Unlock+0x40>)
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00d      	beq.n	8000d32 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_FLASH_Unlock+0x40>)
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_FLASH_Unlock+0x44>)
 8000d1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_FLASH_Unlock+0x40>)
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_FLASH_Unlock+0x48>)
 8000d20:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <HAL_FLASH_Unlock+0x40>)
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40022000 	.word	0x40022000
 8000d44:	45670123 	.word	0x45670123
 8000d48:	cdef89ab 	.word	0xcdef89ab

08000d4c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_FLASH_Lock+0x1c>)
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_FLASH_Lock+0x1c>)
 8000d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40022000 	.word	0x40022000

08000d6c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000d70:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <HAL_FLASH_GetError+0x10>)
 8000d72:	69db      	ldr	r3, [r3, #28]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	200000d8 	.word	0x200000d8

08000d80 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <FLASH_Program_HalfWord+0x30>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <FLASH_Program_HalfWord+0x34>)
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <FLASH_Program_HalfWord+0x34>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	887a      	ldrh	r2, [r7, #2]
 8000da2:	801a      	strh	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200000d8 	.word	0x200000d8
 8000db4:	40022000 	.word	0x40022000

08000db8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff fd66 	bl	8000890 <HAL_GetTick>
 8000dc4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dc6:	e010      	b.n	8000dea <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dce:	d00c      	beq.n	8000dea <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d007      	beq.n	8000de6 <FLASH_WaitForLastOperation+0x2e>
 8000dd6:	f7ff fd5b 	bl	8000890 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d201      	bcs.n	8000dea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e025      	b.n	8000e36 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1e8      	bne.n	8000dc8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000e04:	2220      	movs	r2, #32
 8000e06:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10b      	bne.n	8000e2c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d105      	bne.n	8000e2c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <FLASH_WaitForLastOperation+0x88>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e2c:	f000 f80a 	bl	8000e44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d009      	beq.n	8000e6e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e64:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e84:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <FLASH_SetErrorCode+0x9c>)
 8000ea4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f240 1201 	movw	r2, #257	; 0x101
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d106      	bne.n	8000eca <FLASH_SetErrorCode+0x86>
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	61d3      	str	r3, [r2, #28]
}  
 8000ec8:	e002      	b.n	8000ed0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <FLASH_SetErrorCode+0x98>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60d3      	str	r3, [r2, #12]
}  
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40022000 	.word	0x40022000
 8000ee0:	200000d8 	.word	0x200000d8

08000ee4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <HAL_FLASHEx_Erase+0xd0>)
 8000ef8:	7e1b      	ldrb	r3, [r3, #24]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <HAL_FLASHEx_Erase+0x1e>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e053      	b.n	8000faa <HAL_FLASHEx_Erase+0xc6>
 8000f02:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <HAL_FLASHEx_Erase+0xd0>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d116      	bne.n	8000f3e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f14:	f7ff ff50 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d141      	bne.n	8000fa2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 f84c 	bl	8000fbc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f28:	f7ff ff46 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_FLASHEx_Erase+0xd4>)
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <HAL_FLASHEx_Erase+0xd4>)
 8000f36:	f023 0304 	bic.w	r3, r3, #4
 8000f3a:	6113      	str	r3, [r2, #16]
 8000f3c:	e031      	b.n	8000fa2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f42:	f7ff ff39 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d12a      	bne.n	8000fa2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f52:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	e019      	b.n	8000f90 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000f5c:	68b8      	ldr	r0, [r7, #8]
 8000f5e:	f000 f849 	bl	8000ff4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f66:	f7ff ff27 	bl	8000db8 <FLASH_WaitForLastOperation>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_FLASHEx_Erase+0xd4>)
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_FLASHEx_Erase+0xd4>)
 8000f74:	f023 0302 	bic.w	r3, r3, #2
 8000f78:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	601a      	str	r2, [r3, #0]
            break;
 8000f86:	e00c      	b.n	8000fa2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f8e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	029a      	lsls	r2, r3, #10
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d3dc      	bcc.n	8000f5c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_FLASHEx_Erase+0xd0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	761a      	strb	r2, [r3, #24]

  return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000d8 	.word	0x200000d8
 8000fb8:	40022000 	.word	0x40022000

08000fbc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <FLASH_MassErase+0x30>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <FLASH_MassErase+0x34>)
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <FLASH_MassErase+0x34>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <FLASH_MassErase+0x34>)
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <FLASH_MassErase+0x34>)
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	200000d8 	.word	0x200000d8
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <FLASH_PageErase+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <FLASH_PageErase+0x3c>)
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <FLASH_PageErase+0x3c>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <FLASH_PageErase+0x3c>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <FLASH_PageErase+0x3c>)
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4a05      	ldr	r2, [pc, #20]	; (8001030 <FLASH_PageErase+0x3c>)
 800101a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200000d8 	.word	0x200000d8
 8001030:	40022000 	.word	0x40022000

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b08b      	sub	sp, #44	; 0x2c
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	e169      	b.n	800131c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001048:	2201      	movs	r2, #1
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	429a      	cmp	r2, r3
 8001062:	f040 8158 	bne.w	8001316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a9a      	ldr	r2, [pc, #616]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d05e      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001070:	4a98      	ldr	r2, [pc, #608]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d875      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001076:	4a98      	ldr	r2, [pc, #608]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d058      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 800107c:	4a96      	ldr	r2, [pc, #600]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d86f      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001082:	4a96      	ldr	r2, [pc, #600]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d052      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001088:	4a94      	ldr	r2, [pc, #592]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d869      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800108e:	4a94      	ldr	r2, [pc, #592]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d04c      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001094:	4a92      	ldr	r2, [pc, #584]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d863      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800109a:	4a92      	ldr	r2, [pc, #584]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d046      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 80010a0:	4a90      	ldr	r2, [pc, #576]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d85d      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d82a      	bhi.n	8001100 <HAL_GPIO_Init+0xcc>
 80010aa:	2b12      	cmp	r3, #18
 80010ac:	d859      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <HAL_GPIO_Init+0x80>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	0800112f 	.word	0x0800112f
 80010b8:	08001109 	.word	0x08001109
 80010bc:	0800111b 	.word	0x0800111b
 80010c0:	0800115d 	.word	0x0800115d
 80010c4:	08001163 	.word	0x08001163
 80010c8:	08001163 	.word	0x08001163
 80010cc:	08001163 	.word	0x08001163
 80010d0:	08001163 	.word	0x08001163
 80010d4:	08001163 	.word	0x08001163
 80010d8:	08001163 	.word	0x08001163
 80010dc:	08001163 	.word	0x08001163
 80010e0:	08001163 	.word	0x08001163
 80010e4:	08001163 	.word	0x08001163
 80010e8:	08001163 	.word	0x08001163
 80010ec:	08001163 	.word	0x08001163
 80010f0:	08001163 	.word	0x08001163
 80010f4:	08001163 	.word	0x08001163
 80010f8:	08001111 	.word	0x08001111
 80010fc:	08001125 	.word	0x08001125
 8001100:	4a79      	ldr	r2, [pc, #484]	; (80012e8 <HAL_GPIO_Init+0x2b4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001106:	e02c      	b.n	8001162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e029      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	3304      	adds	r3, #4
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e024      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	3308      	adds	r3, #8
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e01f      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	330c      	adds	r3, #12
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e01a      	b.n	8001164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001136:	2304      	movs	r3, #4
 8001138:	623b      	str	r3, [r7, #32]
          break;
 800113a:	e013      	b.n	8001164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d105      	bne.n	8001150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001144:	2308      	movs	r3, #8
 8001146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	611a      	str	r2, [r3, #16]
          break;
 800114e:	e009      	b.n	8001164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001150:	2308      	movs	r3, #8
 8001152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	615a      	str	r2, [r3, #20]
          break;
 800115a:	e003      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x130>
          break;
 8001162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d801      	bhi.n	800116e <HAL_GPIO_Init+0x13a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	e001      	b.n	8001172 <HAL_GPIO_Init+0x13e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bff      	cmp	r3, #255	; 0xff
 8001178:	d802      	bhi.n	8001180 <HAL_GPIO_Init+0x14c>
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	e002      	b.n	8001186 <HAL_GPIO_Init+0x152>
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	3b08      	subs	r3, #8
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	210f      	movs	r1, #15
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	6a39      	ldr	r1, [r7, #32]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	431a      	orrs	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80b1 	beq.w	8001316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b4:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <HAL_GPIO_Init+0x2c0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_GPIO_Init+0x1ec>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <HAL_GPIO_Init+0x2c4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00d      	beq.n	800121c <HAL_GPIO_Init+0x1e8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3e      	ldr	r2, [pc, #248]	; (80012fc <HAL_GPIO_Init+0x2c8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x1e4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3d      	ldr	r2, [pc, #244]	; (8001300 <HAL_GPIO_Init+0x2cc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_Init+0x1e0>
 8001210:	2303      	movs	r3, #3
 8001212:	e006      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001214:	2304      	movs	r3, #4
 8001216:	e004      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001218:	2302      	movs	r3, #2
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001220:	2300      	movs	r3, #0
 8001222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001224:	f002 0203 	and.w	r2, r2, #3
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	4093      	lsls	r3, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001232:	492f      	ldr	r1, [pc, #188]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	492c      	ldr	r1, [pc, #176]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	4928      	ldr	r1, [pc, #160]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001264:	4013      	ands	r3, r2
 8001266:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4922      	ldr	r1, [pc, #136]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	491e      	ldr	r1, [pc, #120]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	4918      	ldr	r1, [pc, #96]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4914      	ldr	r1, [pc, #80]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d021      	beq.n	8001308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	490e      	ldr	r1, [pc, #56]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
 80012d0:	e021      	b.n	8001316 <HAL_GPIO_Init+0x2e2>
 80012d2:	bf00      	nop
 80012d4:	10320000 	.word	0x10320000
 80012d8:	10310000 	.word	0x10310000
 80012dc:	10220000 	.word	0x10220000
 80012e0:	10210000 	.word	0x10210000
 80012e4:	10120000 	.word	0x10120000
 80012e8:	10110000 	.word	0x10110000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40011400 	.word	0x40011400
 8001304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_GPIO_Init+0x304>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	43db      	mvns	r3, r3
 8001310:	4909      	ldr	r1, [pc, #36]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001312:	4013      	ands	r3, r2
 8001314:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3301      	adds	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	f47f ae8e 	bne.w	8001048 <HAL_GPIO_Init+0x14>
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	372c      	adds	r7, #44	; 0x2c
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e272      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8087 	beq.w	800146a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800135c:	4b92      	ldr	r3, [pc, #584]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b04      	cmp	r3, #4
 8001366:	d00c      	beq.n	8001382 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001368:	4b8f      	ldr	r3, [pc, #572]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b08      	cmp	r3, #8
 8001372:	d112      	bne.n	800139a <HAL_RCC_OscConfig+0x5e>
 8001374:	4b8c      	ldr	r3, [pc, #560]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001380:	d10b      	bne.n	800139a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001382:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d06c      	beq.n	8001468 <HAL_RCC_OscConfig+0x12c>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d168      	bne.n	8001468 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e24c      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x76>
 80013a4:	4b80      	ldr	r3, [pc, #512]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a7f      	ldr	r2, [pc, #508]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	e02e      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x98>
 80013ba:	4b7b      	ldr	r3, [pc, #492]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a7a      	ldr	r2, [pc, #488]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b78      	ldr	r3, [pc, #480]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a77      	ldr	r2, [pc, #476]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e01d      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0xbc>
 80013de:	4b72      	ldr	r3, [pc, #456]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a71      	ldr	r2, [pc, #452]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b6f      	ldr	r3, [pc, #444]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a6e      	ldr	r2, [pc, #440]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0xd4>
 80013f8:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a6a      	ldr	r2, [pc, #424]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a67      	ldr	r2, [pc, #412]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 800140a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fa3a 	bl	8000890 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fa36 	bl	8000890 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e200      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b5d      	ldr	r3, [pc, #372]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0xe4>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fa26 	bl	8000890 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fa22 	bl	8000890 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1ec      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x10c>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d063      	beq.n	800153e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001476:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b08      	cmp	r3, #8
 800148c:	d11c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x18c>
 800148e:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d116      	bne.n	80014c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x176>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e1c0      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b2:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4939      	ldr	r1, [pc, #228]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	e03a      	b.n	800153e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <HAL_RCC_OscConfig+0x270>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff f9db 	bl	8000890 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff f9d7 	bl	8000890 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e1a1      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4927      	ldr	r1, [pc, #156]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	e015      	b.n	800153e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <HAL_RCC_OscConfig+0x270>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff f9ba 	bl	8000890 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff f9b6 	bl	8000890 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e180      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d03a      	beq.n	80015c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d019      	beq.n	8001586 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_RCC_OscConfig+0x274>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff f99a 	bl	8000890 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff f996 	bl	8000890 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e160      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_RCC_OscConfig+0x26c>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800157e:	2001      	movs	r0, #1
 8001580:	f000 fad8 	bl	8001b34 <RCC_Delay>
 8001584:	e01c      	b.n	80015c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_RCC_OscConfig+0x274>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff f980 	bl	8000890 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001592:	e00f      	b.n	80015b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff f97c 	bl	8000890 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d908      	bls.n	80015b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e146      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	42420000 	.word	0x42420000
 80015b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	4b92      	ldr	r3, [pc, #584]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e9      	bne.n	8001594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a6 	beq.w	800171a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d2:	4b8b      	ldr	r3, [pc, #556]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10d      	bne.n	80015fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a87      	ldr	r2, [pc, #540]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b85      	ldr	r3, [pc, #532]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f6:	2301      	movs	r3, #1
 80015f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fa:	4b82      	ldr	r3, [pc, #520]	; (8001804 <HAL_RCC_OscConfig+0x4c8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d118      	bne.n	8001638 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001606:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x4c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7e      	ldr	r2, [pc, #504]	; (8001804 <HAL_RCC_OscConfig+0x4c8>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001612:	f7ff f93d 	bl	8000890 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161a:	f7ff f939 	bl	8000890 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	; 0x64
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e103      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	4b75      	ldr	r3, [pc, #468]	; (8001804 <HAL_RCC_OscConfig+0x4c8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x312>
 8001640:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a6e      	ldr	r2, [pc, #440]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6213      	str	r3, [r2, #32]
 800164c:	e02d      	b.n	80016aa <HAL_RCC_OscConfig+0x36e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x334>
 8001656:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a69      	ldr	r2, [pc, #420]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6213      	str	r3, [r2, #32]
 8001662:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a66      	ldr	r2, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	f023 0304 	bic.w	r3, r3, #4
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	e01c      	b.n	80016aa <HAL_RCC_OscConfig+0x36e>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d10c      	bne.n	8001692 <HAL_RCC_OscConfig+0x356>
 8001678:	4b61      	ldr	r3, [pc, #388]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4a60      	ldr	r2, [pc, #384]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	6213      	str	r3, [r2, #32]
 8001684:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a5d      	ldr	r2, [pc, #372]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e00b      	b.n	80016aa <HAL_RCC_OscConfig+0x36e>
 8001692:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4a5a      	ldr	r2, [pc, #360]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6213      	str	r3, [r2, #32]
 800169e:	4b58      	ldr	r3, [pc, #352]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4a57      	ldr	r2, [pc, #348]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d015      	beq.n	80016de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff f8ed 	bl	8000890 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff f8e9 	bl	8000890 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e0b1      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ee      	beq.n	80016ba <HAL_RCC_OscConfig+0x37e>
 80016dc:	e014      	b.n	8001708 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff f8d7 	bl	8000890 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff f8d3 	bl	8000890 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e09b      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	4b40      	ldr	r3, [pc, #256]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ee      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170e:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a3b      	ldr	r2, [pc, #236]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8087 	beq.w	8001832 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001724:	4b36      	ldr	r3, [pc, #216]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d061      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d146      	bne.n	80017c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_RCC_OscConfig+0x4cc>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff f8a7 	bl	8000890 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001746:	f7ff f8a3 	bl	8000890 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e06d      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d108      	bne.n	8001780 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	4921      	ldr	r1, [pc, #132]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a19      	ldr	r1, [r3, #32]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	430b      	orrs	r3, r1
 8001792:	491b      	ldr	r1, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x4cc>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff f877 	bl	8000890 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff f873 	bl	8000890 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e03d      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x46a>
 80017c4:	e035      	b.n	8001832 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_RCC_OscConfig+0x4cc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff f860 	bl	8000890 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff f85c 	bl	8000890 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e026      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x498>
 80017f2:	e01e      	b.n	8001832 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d107      	bne.n	800180c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e019      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
 8001800:	40021000 	.word	0x40021000
 8001804:	40007000 	.word	0x40007000
 8001808:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_OscConfig+0x500>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	429a      	cmp	r2, r3
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000

08001840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0d0      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d910      	bls.n	8001884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 0207 	bic.w	r2, r3, #7
 800186a:	4965      	ldr	r1, [pc, #404]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b8      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	494d      	ldr	r1, [pc, #308]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d040      	beq.n	8001960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d115      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e073      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e06b      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4936      	ldr	r1, [pc, #216]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001930:	f7fe ffae 	bl	8000890 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7fe ffaa 	bl	8000890 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e053      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 020c 	and.w	r2, r3, #12
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1eb      	bne.n	8001938 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d210      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 0207 	bic.w	r2, r3, #7
 8001976:	4922      	ldr	r1, [pc, #136]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e032      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4916      	ldr	r1, [pc, #88]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ce:	f000 f821 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490a      	ldr	r1, [pc, #40]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_RCC_ClockConfig+0x1cc>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1d0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe ff0c 	bl	800080c <HAL_InitTick>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000
 8001a04:	40021000 	.word	0x40021000
 8001a08:	0800300c 	.word	0x0800300c
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	b490      	push	{r4, r7}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a1c:	1d3c      	adds	r4, r7, #4
 8001a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a24:	f240 2301 	movw	r3, #513	; 0x201
 8001a28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d002      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x40>
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d003      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0x46>
 8001a52:	e02b      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a56:	623b      	str	r3, [r7, #32]
      break;
 8001a58:	e02b      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	0c9b      	lsrs	r3, r3, #18
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3328      	adds	r3, #40	; 0x28
 8001a64:	443b      	add	r3, r7
 8001a66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d012      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	0c5b      	lsrs	r3, r3, #17
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	3328      	adds	r3, #40	; 0x28
 8001a82:	443b      	add	r3, r7
 8001a84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a8e:	fb03 f202 	mul.w	r2, r3, r2
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9a:	e004      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	623b      	str	r3, [r7, #32]
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aae:	623b      	str	r3, [r7, #32]
      break;
 8001ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc90      	pop	{r4, r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	08002ffc 	.word	0x08002ffc
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	007a1200 	.word	0x007a1200
 8001acc:	003d0900 	.word	0x003d0900

08001ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae8:	f7ff fff2 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	0800301c 	.word	0x0800301c

08001b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0adb      	lsrs	r3, r3, #11
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	0800301c 	.word	0x0800301c

08001b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <RCC_Delay+0x34>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <RCC_Delay+0x38>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0a5b      	lsrs	r3, r3, #9
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b50:	bf00      	nop
  }
  while (Delay --);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	60fa      	str	r2, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f9      	bne.n	8001b50 <RCC_Delay+0x1c>
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e03f      	b.n	8001c02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fd42 	bl	8000620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fc25 	bl	8002404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b08a      	sub	sp, #40	; 0x28
 8001c0e:	af02      	add	r7, sp, #8
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4613      	mov	r3, r2
 8001c18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	d17c      	bne.n	8001d24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_UART_Transmit+0x2c>
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e075      	b.n	8001d26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_UART_Transmit+0x3e>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e06e      	b.n	8001d26 <HAL_UART_Transmit+0x11c>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2221      	movs	r2, #33	; 0x21
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c5e:	f7fe fe17 	bl	8000890 <HAL_GetTick>
 8001c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	88fa      	ldrh	r2, [r7, #6]
 8001c6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c78:	d108      	bne.n	8001c8c <HAL_UART_Transmit+0x82>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d104      	bne.n	8001c8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	e003      	b.n	8001c94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c9c:	e02a      	b.n	8001cf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 fa11 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e036      	b.n	8001d26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	e007      	b.n	8001ce6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1cf      	bne.n	8001c9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2200      	movs	r2, #0
 8001d06:	2140      	movs	r1, #64	; 0x40
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 f9e1 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e006      	b.n	8001d26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
  }
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10d      	bne.n	8001d82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_UART_IRQHandler+0x52>
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fa99 	bl	80022b2 <UART_Receive_IT>
      return;
 8001d80:	e17b      	b.n	800207a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80b1 	beq.w	8001eec <HAL_UART_IRQHandler+0x1bc>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_UART_IRQHandler+0x70>
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80a6 	beq.w	8001eec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_UART_IRQHandler+0x90>
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00a      	beq.n	8001de0 <HAL_UART_IRQHandler+0xb0>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f043 0202 	orr.w	r2, r3, #2
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_UART_IRQHandler+0xd0>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0204 	orr.w	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00f      	beq.n	8001e2a <HAL_UART_IRQHandler+0xfa>
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d104      	bne.n	8001e1e <HAL_UART_IRQHandler+0xee>
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f043 0208 	orr.w	r2, r3, #8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 811e 	beq.w	8002070 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_UART_IRQHandler+0x11e>
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fa32 	bl	80022b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <HAL_UART_IRQHandler+0x146>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d031      	beq.n	8001eda <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f974 	bl	8002164 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d023      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d013      	beq.n	8001eca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	4a76      	ldr	r2, [pc, #472]	; (8002080 <HAL_UART_IRQHandler+0x350>)
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fe40 	bl	8000b34 <HAL_DMA_Abort_IT>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec8:	e00e      	b.n	8001ee8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8ec 	bl	80020a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed0:	e00a      	b.n	8001ee8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8e8 	bl	80020a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed8:	e006      	b.n	8001ee8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8e4 	bl	80020a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001ee6:	e0c3      	b.n	8002070 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ee8:	bf00      	nop
    return;
 8001eea:	e0c1      	b.n	8002070 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	f040 80a1 	bne.w	8002038 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 809b 	beq.w	8002038 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 8095 	beq.w	8002038 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d04e      	beq.n	8001fd0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001f3c:	8a3b      	ldrh	r3, [r7, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8098 	beq.w	8002074 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f48:	8a3a      	ldrh	r2, [r7, #16]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	f080 8092 	bcs.w	8002074 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8a3a      	ldrh	r2, [r7, #16]
 8001f54:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d02b      	beq.n	8001fb8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f6e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0210 	bic.w	r2, r2, #16
 8001fac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fd83 	bl	8000abe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f876 	bl	80020ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001fce:	e051      	b.n	8002074 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d047      	beq.n	8002078 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001fe8:	8a7b      	ldrh	r3, [r7, #18]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d044      	beq.n	8002078 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ffc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0210 	bic.w	r2, r2, #16
 800202a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800202c:	8a7b      	ldrh	r3, [r7, #18]
 800202e:	4619      	mov	r1, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f842 	bl	80020ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002036:	e01f      	b.n	8002078 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_UART_IRQHandler+0x324>
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f8c9 	bl	80021e4 <UART_Transmit_IT>
    return;
 8002052:	e012      	b.n	800207a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00d      	beq.n	800207a <HAL_UART_IRQHandler+0x34a>
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f90a 	bl	8002282 <UART_EndTransmit_IT>
    return;
 800206e:	e004      	b.n	800207a <HAL_UART_IRQHandler+0x34a>
    return;
 8002070:	bf00      	nop
 8002072:	e002      	b.n	800207a <HAL_UART_IRQHandler+0x34a>
      return;
 8002074:	bf00      	nop
 8002076:	e000      	b.n	800207a <HAL_UART_IRQHandler+0x34a>
      return;
 8002078:	bf00      	nop
  }
}
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	080021bd 	.word	0x080021bd

08002084 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e0:	e02c      	b.n	800213c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d028      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <UART_WaitOnFlagUntilTimeout+0x30>
 80020f0:	f7fe fbce 	bl	8000890 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d21d      	bcs.n	800213c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800210e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e00f      	b.n	800215c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4013      	ands	r3, r2
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	429a      	cmp	r2, r3
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	429a      	cmp	r2, r3
 8002158:	d0c3      	beq.n	80020e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800217a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0210 	bic.w	r2, r2, #16
 80021a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7ff ff66 	bl	80020a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b21      	cmp	r3, #33	; 0x21
 80021f6:	d13e      	bne.n	8002276 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002200:	d114      	bne.n	800222c <UART_Transmit_IT+0x48>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d110      	bne.n	800222c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800221e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	1c9a      	adds	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	621a      	str	r2, [r3, #32]
 800222a:	e008      	b.n	800223e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	1c59      	adds	r1, r3, #1
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6211      	str	r1, [r2, #32]
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29b      	uxth	r3, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4619      	mov	r1, r3
 800224c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002260:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002270:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002298:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff feee 	bl	8002084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b22      	cmp	r3, #34	; 0x22
 80022c4:	f040 8099 	bne.w	80023fa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d0:	d117      	bne.n	8002302 <UART_Receive_IT+0x50>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d113      	bne.n	8002302 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	1c9a      	adds	r2, r3, #2
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002300:	e026      	b.n	8002350 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002314:	d007      	beq.n	8002326 <UART_Receive_IT+0x74>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10a      	bne.n	8002334 <UART_Receive_IT+0x82>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e008      	b.n	8002346 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002340:	b2da      	uxtb	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29b      	uxth	r3, r3
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4619      	mov	r1, r3
 800235e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002360:	2b00      	cmp	r3, #0
 8002362:	d148      	bne.n	80023f6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0220 	bic.w	r2, r2, #32
 8002372:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d123      	bne.n	80023ec <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0210 	bic.w	r2, r2, #16
 80023b8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d10a      	bne.n	80023de <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023e2:	4619      	mov	r1, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fe68 	bl	80020ba <HAL_UARTEx_RxEventCallback>
 80023ea:	e002      	b.n	80023f2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff fe52 	bl	8002096 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e002      	b.n	80023fc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800243e:	f023 030c 	bic.w	r3, r3, #12
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	430b      	orrs	r3, r1
 800244a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2c      	ldr	r2, [pc, #176]	; (8002518 <UART_SetConfig+0x114>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d103      	bne.n	8002474 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800246c:	f7ff fb4e 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	e002      	b.n	800247a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002474:	f7ff fb36 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8002478:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009a      	lsls	r2, r3, #2
 8002484:	441a      	add	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	4a22      	ldr	r2, [pc, #136]	; (800251c <UART_SetConfig+0x118>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	0119      	lsls	r1, r3, #4
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	009a      	lsls	r2, r3, #2
 80024a4:	441a      	add	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <UART_SetConfig+0x118>)
 80024b2:	fba3 0302 	umull	r0, r3, r3, r2
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2064      	movs	r0, #100	; 0x64
 80024ba:	fb00 f303 	mul.w	r3, r0, r3
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	3332      	adds	r3, #50	; 0x32
 80024c4:	4a15      	ldr	r2, [pc, #84]	; (800251c <UART_SetConfig+0x118>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d0:	4419      	add	r1, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	009a      	lsls	r2, r3, #2
 80024dc:	441a      	add	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <UART_SetConfig+0x118>)
 80024ea:	fba3 0302 	umull	r0, r3, r3, r2
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2064      	movs	r0, #100	; 0x64
 80024f2:	fb00 f303 	mul.w	r3, r0, r3
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	3332      	adds	r3, #50	; 0x32
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <UART_SetConfig+0x118>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	f003 020f 	and.w	r2, r3, #15
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	440a      	add	r2, r1
 800250e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40013800 	.word	0x40013800
 800251c:	51eb851f 	.word	0x51eb851f

08002520 <__errno>:
 8002520:	4b01      	ldr	r3, [pc, #4]	; (8002528 <__errno+0x8>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	2000000c 	.word	0x2000000c

0800252c <__libc_init_array>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	2600      	movs	r6, #0
 8002530:	4d0c      	ldr	r5, [pc, #48]	; (8002564 <__libc_init_array+0x38>)
 8002532:	4c0d      	ldr	r4, [pc, #52]	; (8002568 <__libc_init_array+0x3c>)
 8002534:	1b64      	subs	r4, r4, r5
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	42a6      	cmp	r6, r4
 800253a:	d109      	bne.n	8002550 <__libc_init_array+0x24>
 800253c:	f000 fcb0 	bl	8002ea0 <_init>
 8002540:	2600      	movs	r6, #0
 8002542:	4d0a      	ldr	r5, [pc, #40]	; (800256c <__libc_init_array+0x40>)
 8002544:	4c0a      	ldr	r4, [pc, #40]	; (8002570 <__libc_init_array+0x44>)
 8002546:	1b64      	subs	r4, r4, r5
 8002548:	10a4      	asrs	r4, r4, #2
 800254a:	42a6      	cmp	r6, r4
 800254c:	d105      	bne.n	800255a <__libc_init_array+0x2e>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f855 3b04 	ldr.w	r3, [r5], #4
 8002554:	4798      	blx	r3
 8002556:	3601      	adds	r6, #1
 8002558:	e7ee      	b.n	8002538 <__libc_init_array+0xc>
 800255a:	f855 3b04 	ldr.w	r3, [r5], #4
 800255e:	4798      	blx	r3
 8002560:	3601      	adds	r6, #1
 8002562:	e7f2      	b.n	800254a <__libc_init_array+0x1e>
 8002564:	08003058 	.word	0x08003058
 8002568:	08003058 	.word	0x08003058
 800256c:	08003058 	.word	0x08003058
 8002570:	0800305c 	.word	0x0800305c

08002574 <memset>:
 8002574:	4603      	mov	r3, r0
 8002576:	4402      	add	r2, r0
 8002578:	4293      	cmp	r3, r2
 800257a:	d100      	bne.n	800257e <memset+0xa>
 800257c:	4770      	bx	lr
 800257e:	f803 1b01 	strb.w	r1, [r3], #1
 8002582:	e7f9      	b.n	8002578 <memset+0x4>

08002584 <sniprintf>:
 8002584:	b40c      	push	{r2, r3}
 8002586:	b530      	push	{r4, r5, lr}
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <sniprintf+0x64>)
 800258a:	1e0c      	subs	r4, r1, #0
 800258c:	681d      	ldr	r5, [r3, #0]
 800258e:	b09d      	sub	sp, #116	; 0x74
 8002590:	da08      	bge.n	80025a4 <sniprintf+0x20>
 8002592:	238b      	movs	r3, #139	; 0x8b
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	602b      	str	r3, [r5, #0]
 800259a:	b01d      	add	sp, #116	; 0x74
 800259c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80025a0:	b002      	add	sp, #8
 80025a2:	4770      	bx	lr
 80025a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80025a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80025ac:	bf0c      	ite	eq
 80025ae:	4623      	moveq	r3, r4
 80025b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80025b4:	9304      	str	r3, [sp, #16]
 80025b6:	9307      	str	r3, [sp, #28]
 80025b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025bc:	9002      	str	r0, [sp, #8]
 80025be:	9006      	str	r0, [sp, #24]
 80025c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80025c4:	4628      	mov	r0, r5
 80025c6:	ab21      	add	r3, sp, #132	; 0x84
 80025c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80025ca:	a902      	add	r1, sp, #8
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	f000 f869 	bl	80026a4 <_svfiprintf_r>
 80025d2:	1c43      	adds	r3, r0, #1
 80025d4:	bfbc      	itt	lt
 80025d6:	238b      	movlt	r3, #139	; 0x8b
 80025d8:	602b      	strlt	r3, [r5, #0]
 80025da:	2c00      	cmp	r4, #0
 80025dc:	d0dd      	beq.n	800259a <sniprintf+0x16>
 80025de:	2200      	movs	r2, #0
 80025e0:	9b02      	ldr	r3, [sp, #8]
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e7d9      	b.n	800259a <sniprintf+0x16>
 80025e6:	bf00      	nop
 80025e8:	2000000c 	.word	0x2000000c

080025ec <__ssputs_r>:
 80025ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025f0:	688e      	ldr	r6, [r1, #8]
 80025f2:	4682      	mov	sl, r0
 80025f4:	429e      	cmp	r6, r3
 80025f6:	460c      	mov	r4, r1
 80025f8:	4690      	mov	r8, r2
 80025fa:	461f      	mov	r7, r3
 80025fc:	d838      	bhi.n	8002670 <__ssputs_r+0x84>
 80025fe:	898a      	ldrh	r2, [r1, #12]
 8002600:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002604:	d032      	beq.n	800266c <__ssputs_r+0x80>
 8002606:	6825      	ldr	r5, [r4, #0]
 8002608:	6909      	ldr	r1, [r1, #16]
 800260a:	3301      	adds	r3, #1
 800260c:	eba5 0901 	sub.w	r9, r5, r1
 8002610:	6965      	ldr	r5, [r4, #20]
 8002612:	444b      	add	r3, r9
 8002614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800261c:	106d      	asrs	r5, r5, #1
 800261e:	429d      	cmp	r5, r3
 8002620:	bf38      	it	cc
 8002622:	461d      	movcc	r5, r3
 8002624:	0553      	lsls	r3, r2, #21
 8002626:	d531      	bpl.n	800268c <__ssputs_r+0xa0>
 8002628:	4629      	mov	r1, r5
 800262a:	f000 fb6f 	bl	8002d0c <_malloc_r>
 800262e:	4606      	mov	r6, r0
 8002630:	b950      	cbnz	r0, 8002648 <__ssputs_r+0x5c>
 8002632:	230c      	movs	r3, #12
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f8ca 3000 	str.w	r3, [sl]
 800263c:	89a3      	ldrh	r3, [r4, #12]
 800263e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002642:	81a3      	strh	r3, [r4, #12]
 8002644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002648:	464a      	mov	r2, r9
 800264a:	6921      	ldr	r1, [r4, #16]
 800264c:	f000 face 	bl	8002bec <memcpy>
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265a:	81a3      	strh	r3, [r4, #12]
 800265c:	6126      	str	r6, [r4, #16]
 800265e:	444e      	add	r6, r9
 8002660:	6026      	str	r6, [r4, #0]
 8002662:	463e      	mov	r6, r7
 8002664:	6165      	str	r5, [r4, #20]
 8002666:	eba5 0509 	sub.w	r5, r5, r9
 800266a:	60a5      	str	r5, [r4, #8]
 800266c:	42be      	cmp	r6, r7
 800266e:	d900      	bls.n	8002672 <__ssputs_r+0x86>
 8002670:	463e      	mov	r6, r7
 8002672:	4632      	mov	r2, r6
 8002674:	4641      	mov	r1, r8
 8002676:	6820      	ldr	r0, [r4, #0]
 8002678:	f000 fac6 	bl	8002c08 <memmove>
 800267c:	68a3      	ldr	r3, [r4, #8]
 800267e:	2000      	movs	r0, #0
 8002680:	1b9b      	subs	r3, r3, r6
 8002682:	60a3      	str	r3, [r4, #8]
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	4433      	add	r3, r6
 8002688:	6023      	str	r3, [r4, #0]
 800268a:	e7db      	b.n	8002644 <__ssputs_r+0x58>
 800268c:	462a      	mov	r2, r5
 800268e:	f000 fbb1 	bl	8002df4 <_realloc_r>
 8002692:	4606      	mov	r6, r0
 8002694:	2800      	cmp	r0, #0
 8002696:	d1e1      	bne.n	800265c <__ssputs_r+0x70>
 8002698:	4650      	mov	r0, sl
 800269a:	6921      	ldr	r1, [r4, #16]
 800269c:	f000 face 	bl	8002c3c <_free_r>
 80026a0:	e7c7      	b.n	8002632 <__ssputs_r+0x46>
	...

080026a4 <_svfiprintf_r>:
 80026a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a8:	4698      	mov	r8, r3
 80026aa:	898b      	ldrh	r3, [r1, #12]
 80026ac:	4607      	mov	r7, r0
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	460d      	mov	r5, r1
 80026b2:	4614      	mov	r4, r2
 80026b4:	b09d      	sub	sp, #116	; 0x74
 80026b6:	d50e      	bpl.n	80026d6 <_svfiprintf_r+0x32>
 80026b8:	690b      	ldr	r3, [r1, #16]
 80026ba:	b963      	cbnz	r3, 80026d6 <_svfiprintf_r+0x32>
 80026bc:	2140      	movs	r1, #64	; 0x40
 80026be:	f000 fb25 	bl	8002d0c <_malloc_r>
 80026c2:	6028      	str	r0, [r5, #0]
 80026c4:	6128      	str	r0, [r5, #16]
 80026c6:	b920      	cbnz	r0, 80026d2 <_svfiprintf_r+0x2e>
 80026c8:	230c      	movs	r3, #12
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	e0d1      	b.n	8002876 <_svfiprintf_r+0x1d2>
 80026d2:	2340      	movs	r3, #64	; 0x40
 80026d4:	616b      	str	r3, [r5, #20]
 80026d6:	2300      	movs	r3, #0
 80026d8:	9309      	str	r3, [sp, #36]	; 0x24
 80026da:	2320      	movs	r3, #32
 80026dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026e0:	2330      	movs	r3, #48	; 0x30
 80026e2:	f04f 0901 	mov.w	r9, #1
 80026e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80026ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002890 <_svfiprintf_r+0x1ec>
 80026ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026f2:	4623      	mov	r3, r4
 80026f4:	469a      	mov	sl, r3
 80026f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026fa:	b10a      	cbz	r2, 8002700 <_svfiprintf_r+0x5c>
 80026fc:	2a25      	cmp	r2, #37	; 0x25
 80026fe:	d1f9      	bne.n	80026f4 <_svfiprintf_r+0x50>
 8002700:	ebba 0b04 	subs.w	fp, sl, r4
 8002704:	d00b      	beq.n	800271e <_svfiprintf_r+0x7a>
 8002706:	465b      	mov	r3, fp
 8002708:	4622      	mov	r2, r4
 800270a:	4629      	mov	r1, r5
 800270c:	4638      	mov	r0, r7
 800270e:	f7ff ff6d 	bl	80025ec <__ssputs_r>
 8002712:	3001      	adds	r0, #1
 8002714:	f000 80aa 	beq.w	800286c <_svfiprintf_r+0x1c8>
 8002718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800271a:	445a      	add	r2, fp
 800271c:	9209      	str	r2, [sp, #36]	; 0x24
 800271e:	f89a 3000 	ldrb.w	r3, [sl]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80a2 	beq.w	800286c <_svfiprintf_r+0x1c8>
 8002728:	2300      	movs	r3, #0
 800272a:	f04f 32ff 	mov.w	r2, #4294967295
 800272e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002732:	f10a 0a01 	add.w	sl, sl, #1
 8002736:	9304      	str	r3, [sp, #16]
 8002738:	9307      	str	r3, [sp, #28]
 800273a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800273e:	931a      	str	r3, [sp, #104]	; 0x68
 8002740:	4654      	mov	r4, sl
 8002742:	2205      	movs	r2, #5
 8002744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002748:	4851      	ldr	r0, [pc, #324]	; (8002890 <_svfiprintf_r+0x1ec>)
 800274a:	f000 fa41 	bl	8002bd0 <memchr>
 800274e:	9a04      	ldr	r2, [sp, #16]
 8002750:	b9d8      	cbnz	r0, 800278a <_svfiprintf_r+0xe6>
 8002752:	06d0      	lsls	r0, r2, #27
 8002754:	bf44      	itt	mi
 8002756:	2320      	movmi	r3, #32
 8002758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800275c:	0711      	lsls	r1, r2, #28
 800275e:	bf44      	itt	mi
 8002760:	232b      	movmi	r3, #43	; 0x2b
 8002762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002766:	f89a 3000 	ldrb.w	r3, [sl]
 800276a:	2b2a      	cmp	r3, #42	; 0x2a
 800276c:	d015      	beq.n	800279a <_svfiprintf_r+0xf6>
 800276e:	4654      	mov	r4, sl
 8002770:	2000      	movs	r0, #0
 8002772:	f04f 0c0a 	mov.w	ip, #10
 8002776:	9a07      	ldr	r2, [sp, #28]
 8002778:	4621      	mov	r1, r4
 800277a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800277e:	3b30      	subs	r3, #48	; 0x30
 8002780:	2b09      	cmp	r3, #9
 8002782:	d94e      	bls.n	8002822 <_svfiprintf_r+0x17e>
 8002784:	b1b0      	cbz	r0, 80027b4 <_svfiprintf_r+0x110>
 8002786:	9207      	str	r2, [sp, #28]
 8002788:	e014      	b.n	80027b4 <_svfiprintf_r+0x110>
 800278a:	eba0 0308 	sub.w	r3, r0, r8
 800278e:	fa09 f303 	lsl.w	r3, r9, r3
 8002792:	4313      	orrs	r3, r2
 8002794:	46a2      	mov	sl, r4
 8002796:	9304      	str	r3, [sp, #16]
 8002798:	e7d2      	b.n	8002740 <_svfiprintf_r+0x9c>
 800279a:	9b03      	ldr	r3, [sp, #12]
 800279c:	1d19      	adds	r1, r3, #4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	9103      	str	r1, [sp, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bfbb      	ittet	lt
 80027a6:	425b      	neglt	r3, r3
 80027a8:	f042 0202 	orrlt.w	r2, r2, #2
 80027ac:	9307      	strge	r3, [sp, #28]
 80027ae:	9307      	strlt	r3, [sp, #28]
 80027b0:	bfb8      	it	lt
 80027b2:	9204      	strlt	r2, [sp, #16]
 80027b4:	7823      	ldrb	r3, [r4, #0]
 80027b6:	2b2e      	cmp	r3, #46	; 0x2e
 80027b8:	d10c      	bne.n	80027d4 <_svfiprintf_r+0x130>
 80027ba:	7863      	ldrb	r3, [r4, #1]
 80027bc:	2b2a      	cmp	r3, #42	; 0x2a
 80027be:	d135      	bne.n	800282c <_svfiprintf_r+0x188>
 80027c0:	9b03      	ldr	r3, [sp, #12]
 80027c2:	3402      	adds	r4, #2
 80027c4:	1d1a      	adds	r2, r3, #4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	9203      	str	r2, [sp, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bfb8      	it	lt
 80027ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80027d2:	9305      	str	r3, [sp, #20]
 80027d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002894 <_svfiprintf_r+0x1f0>
 80027d8:	2203      	movs	r2, #3
 80027da:	4650      	mov	r0, sl
 80027dc:	7821      	ldrb	r1, [r4, #0]
 80027de:	f000 f9f7 	bl	8002bd0 <memchr>
 80027e2:	b140      	cbz	r0, 80027f6 <_svfiprintf_r+0x152>
 80027e4:	2340      	movs	r3, #64	; 0x40
 80027e6:	eba0 000a 	sub.w	r0, r0, sl
 80027ea:	fa03 f000 	lsl.w	r0, r3, r0
 80027ee:	9b04      	ldr	r3, [sp, #16]
 80027f0:	3401      	adds	r4, #1
 80027f2:	4303      	orrs	r3, r0
 80027f4:	9304      	str	r3, [sp, #16]
 80027f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027fa:	2206      	movs	r2, #6
 80027fc:	4826      	ldr	r0, [pc, #152]	; (8002898 <_svfiprintf_r+0x1f4>)
 80027fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002802:	f000 f9e5 	bl	8002bd0 <memchr>
 8002806:	2800      	cmp	r0, #0
 8002808:	d038      	beq.n	800287c <_svfiprintf_r+0x1d8>
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <_svfiprintf_r+0x1f8>)
 800280c:	bb1b      	cbnz	r3, 8002856 <_svfiprintf_r+0x1b2>
 800280e:	9b03      	ldr	r3, [sp, #12]
 8002810:	3307      	adds	r3, #7
 8002812:	f023 0307 	bic.w	r3, r3, #7
 8002816:	3308      	adds	r3, #8
 8002818:	9303      	str	r3, [sp, #12]
 800281a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800281c:	4433      	add	r3, r6
 800281e:	9309      	str	r3, [sp, #36]	; 0x24
 8002820:	e767      	b.n	80026f2 <_svfiprintf_r+0x4e>
 8002822:	460c      	mov	r4, r1
 8002824:	2001      	movs	r0, #1
 8002826:	fb0c 3202 	mla	r2, ip, r2, r3
 800282a:	e7a5      	b.n	8002778 <_svfiprintf_r+0xd4>
 800282c:	2300      	movs	r3, #0
 800282e:	f04f 0c0a 	mov.w	ip, #10
 8002832:	4619      	mov	r1, r3
 8002834:	3401      	adds	r4, #1
 8002836:	9305      	str	r3, [sp, #20]
 8002838:	4620      	mov	r0, r4
 800283a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800283e:	3a30      	subs	r2, #48	; 0x30
 8002840:	2a09      	cmp	r2, #9
 8002842:	d903      	bls.n	800284c <_svfiprintf_r+0x1a8>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0c5      	beq.n	80027d4 <_svfiprintf_r+0x130>
 8002848:	9105      	str	r1, [sp, #20]
 800284a:	e7c3      	b.n	80027d4 <_svfiprintf_r+0x130>
 800284c:	4604      	mov	r4, r0
 800284e:	2301      	movs	r3, #1
 8002850:	fb0c 2101 	mla	r1, ip, r1, r2
 8002854:	e7f0      	b.n	8002838 <_svfiprintf_r+0x194>
 8002856:	ab03      	add	r3, sp, #12
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	462a      	mov	r2, r5
 800285c:	4638      	mov	r0, r7
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <_svfiprintf_r+0x1fc>)
 8002860:	a904      	add	r1, sp, #16
 8002862:	f3af 8000 	nop.w
 8002866:	1c42      	adds	r2, r0, #1
 8002868:	4606      	mov	r6, r0
 800286a:	d1d6      	bne.n	800281a <_svfiprintf_r+0x176>
 800286c:	89ab      	ldrh	r3, [r5, #12]
 800286e:	065b      	lsls	r3, r3, #25
 8002870:	f53f af2c 	bmi.w	80026cc <_svfiprintf_r+0x28>
 8002874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002876:	b01d      	add	sp, #116	; 0x74
 8002878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800287c:	ab03      	add	r3, sp, #12
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	462a      	mov	r2, r5
 8002882:	4638      	mov	r0, r7
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <_svfiprintf_r+0x1fc>)
 8002886:	a904      	add	r1, sp, #16
 8002888:	f000 f87c 	bl	8002984 <_printf_i>
 800288c:	e7eb      	b.n	8002866 <_svfiprintf_r+0x1c2>
 800288e:	bf00      	nop
 8002890:	08003024 	.word	0x08003024
 8002894:	0800302a 	.word	0x0800302a
 8002898:	0800302e 	.word	0x0800302e
 800289c:	00000000 	.word	0x00000000
 80028a0:	080025ed 	.word	0x080025ed

080028a4 <_printf_common>:
 80028a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028a8:	4616      	mov	r6, r2
 80028aa:	4699      	mov	r9, r3
 80028ac:	688a      	ldr	r2, [r1, #8]
 80028ae:	690b      	ldr	r3, [r1, #16]
 80028b0:	4607      	mov	r7, r0
 80028b2:	4293      	cmp	r3, r2
 80028b4:	bfb8      	it	lt
 80028b6:	4613      	movlt	r3, r2
 80028b8:	6033      	str	r3, [r6, #0]
 80028ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028be:	460c      	mov	r4, r1
 80028c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028c4:	b10a      	cbz	r2, 80028ca <_printf_common+0x26>
 80028c6:	3301      	adds	r3, #1
 80028c8:	6033      	str	r3, [r6, #0]
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	0699      	lsls	r1, r3, #26
 80028ce:	bf42      	ittt	mi
 80028d0:	6833      	ldrmi	r3, [r6, #0]
 80028d2:	3302      	addmi	r3, #2
 80028d4:	6033      	strmi	r3, [r6, #0]
 80028d6:	6825      	ldr	r5, [r4, #0]
 80028d8:	f015 0506 	ands.w	r5, r5, #6
 80028dc:	d106      	bne.n	80028ec <_printf_common+0x48>
 80028de:	f104 0a19 	add.w	sl, r4, #25
 80028e2:	68e3      	ldr	r3, [r4, #12]
 80028e4:	6832      	ldr	r2, [r6, #0]
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	42ab      	cmp	r3, r5
 80028ea:	dc28      	bgt.n	800293e <_printf_common+0x9a>
 80028ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028f0:	1e13      	subs	r3, r2, #0
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	bf18      	it	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	0692      	lsls	r2, r2, #26
 80028fa:	d42d      	bmi.n	8002958 <_printf_common+0xb4>
 80028fc:	4649      	mov	r1, r9
 80028fe:	4638      	mov	r0, r7
 8002900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002904:	47c0      	blx	r8
 8002906:	3001      	adds	r0, #1
 8002908:	d020      	beq.n	800294c <_printf_common+0xa8>
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	68e5      	ldr	r5, [r4, #12]
 800290e:	f003 0306 	and.w	r3, r3, #6
 8002912:	2b04      	cmp	r3, #4
 8002914:	bf18      	it	ne
 8002916:	2500      	movne	r5, #0
 8002918:	6832      	ldr	r2, [r6, #0]
 800291a:	f04f 0600 	mov.w	r6, #0
 800291e:	68a3      	ldr	r3, [r4, #8]
 8002920:	bf08      	it	eq
 8002922:	1aad      	subeq	r5, r5, r2
 8002924:	6922      	ldr	r2, [r4, #16]
 8002926:	bf08      	it	eq
 8002928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800292c:	4293      	cmp	r3, r2
 800292e:	bfc4      	itt	gt
 8002930:	1a9b      	subgt	r3, r3, r2
 8002932:	18ed      	addgt	r5, r5, r3
 8002934:	341a      	adds	r4, #26
 8002936:	42b5      	cmp	r5, r6
 8002938:	d11a      	bne.n	8002970 <_printf_common+0xcc>
 800293a:	2000      	movs	r0, #0
 800293c:	e008      	b.n	8002950 <_printf_common+0xac>
 800293e:	2301      	movs	r3, #1
 8002940:	4652      	mov	r2, sl
 8002942:	4649      	mov	r1, r9
 8002944:	4638      	mov	r0, r7
 8002946:	47c0      	blx	r8
 8002948:	3001      	adds	r0, #1
 800294a:	d103      	bne.n	8002954 <_printf_common+0xb0>
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002954:	3501      	adds	r5, #1
 8002956:	e7c4      	b.n	80028e2 <_printf_common+0x3e>
 8002958:	2030      	movs	r0, #48	; 0x30
 800295a:	18e1      	adds	r1, r4, r3
 800295c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002966:	4422      	add	r2, r4
 8002968:	3302      	adds	r3, #2
 800296a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800296e:	e7c5      	b.n	80028fc <_printf_common+0x58>
 8002970:	2301      	movs	r3, #1
 8002972:	4622      	mov	r2, r4
 8002974:	4649      	mov	r1, r9
 8002976:	4638      	mov	r0, r7
 8002978:	47c0      	blx	r8
 800297a:	3001      	adds	r0, #1
 800297c:	d0e6      	beq.n	800294c <_printf_common+0xa8>
 800297e:	3601      	adds	r6, #1
 8002980:	e7d9      	b.n	8002936 <_printf_common+0x92>
	...

08002984 <_printf_i>:
 8002984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002988:	7e0f      	ldrb	r7, [r1, #24]
 800298a:	4691      	mov	r9, r2
 800298c:	2f78      	cmp	r7, #120	; 0x78
 800298e:	4680      	mov	r8, r0
 8002990:	460c      	mov	r4, r1
 8002992:	469a      	mov	sl, r3
 8002994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800299a:	d807      	bhi.n	80029ac <_printf_i+0x28>
 800299c:	2f62      	cmp	r7, #98	; 0x62
 800299e:	d80a      	bhi.n	80029b6 <_printf_i+0x32>
 80029a0:	2f00      	cmp	r7, #0
 80029a2:	f000 80d9 	beq.w	8002b58 <_printf_i+0x1d4>
 80029a6:	2f58      	cmp	r7, #88	; 0x58
 80029a8:	f000 80a4 	beq.w	8002af4 <_printf_i+0x170>
 80029ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029b4:	e03a      	b.n	8002a2c <_printf_i+0xa8>
 80029b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029ba:	2b15      	cmp	r3, #21
 80029bc:	d8f6      	bhi.n	80029ac <_printf_i+0x28>
 80029be:	a101      	add	r1, pc, #4	; (adr r1, 80029c4 <_printf_i+0x40>)
 80029c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029c4:	08002a1d 	.word	0x08002a1d
 80029c8:	08002a31 	.word	0x08002a31
 80029cc:	080029ad 	.word	0x080029ad
 80029d0:	080029ad 	.word	0x080029ad
 80029d4:	080029ad 	.word	0x080029ad
 80029d8:	080029ad 	.word	0x080029ad
 80029dc:	08002a31 	.word	0x08002a31
 80029e0:	080029ad 	.word	0x080029ad
 80029e4:	080029ad 	.word	0x080029ad
 80029e8:	080029ad 	.word	0x080029ad
 80029ec:	080029ad 	.word	0x080029ad
 80029f0:	08002b3f 	.word	0x08002b3f
 80029f4:	08002a61 	.word	0x08002a61
 80029f8:	08002b21 	.word	0x08002b21
 80029fc:	080029ad 	.word	0x080029ad
 8002a00:	080029ad 	.word	0x080029ad
 8002a04:	08002b61 	.word	0x08002b61
 8002a08:	080029ad 	.word	0x080029ad
 8002a0c:	08002a61 	.word	0x08002a61
 8002a10:	080029ad 	.word	0x080029ad
 8002a14:	080029ad 	.word	0x080029ad
 8002a18:	08002b29 	.word	0x08002b29
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	1d1a      	adds	r2, r3, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	602a      	str	r2, [r5, #0]
 8002a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0a4      	b.n	8002b7a <_printf_i+0x1f6>
 8002a30:	6820      	ldr	r0, [r4, #0]
 8002a32:	6829      	ldr	r1, [r5, #0]
 8002a34:	0606      	lsls	r6, r0, #24
 8002a36:	f101 0304 	add.w	r3, r1, #4
 8002a3a:	d50a      	bpl.n	8002a52 <_printf_i+0xce>
 8002a3c:	680e      	ldr	r6, [r1, #0]
 8002a3e:	602b      	str	r3, [r5, #0]
 8002a40:	2e00      	cmp	r6, #0
 8002a42:	da03      	bge.n	8002a4c <_printf_i+0xc8>
 8002a44:	232d      	movs	r3, #45	; 0x2d
 8002a46:	4276      	negs	r6, r6
 8002a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a4c:	230a      	movs	r3, #10
 8002a4e:	485e      	ldr	r0, [pc, #376]	; (8002bc8 <_printf_i+0x244>)
 8002a50:	e019      	b.n	8002a86 <_printf_i+0x102>
 8002a52:	680e      	ldr	r6, [r1, #0]
 8002a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a58:	602b      	str	r3, [r5, #0]
 8002a5a:	bf18      	it	ne
 8002a5c:	b236      	sxthne	r6, r6
 8002a5e:	e7ef      	b.n	8002a40 <_printf_i+0xbc>
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	6820      	ldr	r0, [r4, #0]
 8002a64:	1d19      	adds	r1, r3, #4
 8002a66:	6029      	str	r1, [r5, #0]
 8002a68:	0601      	lsls	r1, r0, #24
 8002a6a:	d501      	bpl.n	8002a70 <_printf_i+0xec>
 8002a6c:	681e      	ldr	r6, [r3, #0]
 8002a6e:	e002      	b.n	8002a76 <_printf_i+0xf2>
 8002a70:	0646      	lsls	r6, r0, #25
 8002a72:	d5fb      	bpl.n	8002a6c <_printf_i+0xe8>
 8002a74:	881e      	ldrh	r6, [r3, #0]
 8002a76:	2f6f      	cmp	r7, #111	; 0x6f
 8002a78:	bf0c      	ite	eq
 8002a7a:	2308      	moveq	r3, #8
 8002a7c:	230a      	movne	r3, #10
 8002a7e:	4852      	ldr	r0, [pc, #328]	; (8002bc8 <_printf_i+0x244>)
 8002a80:	2100      	movs	r1, #0
 8002a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a86:	6865      	ldr	r5, [r4, #4]
 8002a88:	2d00      	cmp	r5, #0
 8002a8a:	bfa8      	it	ge
 8002a8c:	6821      	ldrge	r1, [r4, #0]
 8002a8e:	60a5      	str	r5, [r4, #8]
 8002a90:	bfa4      	itt	ge
 8002a92:	f021 0104 	bicge.w	r1, r1, #4
 8002a96:	6021      	strge	r1, [r4, #0]
 8002a98:	b90e      	cbnz	r6, 8002a9e <_printf_i+0x11a>
 8002a9a:	2d00      	cmp	r5, #0
 8002a9c:	d04d      	beq.n	8002b3a <_printf_i+0x1b6>
 8002a9e:	4615      	mov	r5, r2
 8002aa0:	fbb6 f1f3 	udiv	r1, r6, r3
 8002aa4:	fb03 6711 	mls	r7, r3, r1, r6
 8002aa8:	5dc7      	ldrb	r7, [r0, r7]
 8002aaa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002aae:	4637      	mov	r7, r6
 8002ab0:	42bb      	cmp	r3, r7
 8002ab2:	460e      	mov	r6, r1
 8002ab4:	d9f4      	bls.n	8002aa0 <_printf_i+0x11c>
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d10b      	bne.n	8002ad2 <_printf_i+0x14e>
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	07de      	lsls	r6, r3, #31
 8002abe:	d508      	bpl.n	8002ad2 <_printf_i+0x14e>
 8002ac0:	6923      	ldr	r3, [r4, #16]
 8002ac2:	6861      	ldr	r1, [r4, #4]
 8002ac4:	4299      	cmp	r1, r3
 8002ac6:	bfde      	ittt	le
 8002ac8:	2330      	movle	r3, #48	; 0x30
 8002aca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ace:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ad2:	1b52      	subs	r2, r2, r5
 8002ad4:	6122      	str	r2, [r4, #16]
 8002ad6:	464b      	mov	r3, r9
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4640      	mov	r0, r8
 8002adc:	f8cd a000 	str.w	sl, [sp]
 8002ae0:	aa03      	add	r2, sp, #12
 8002ae2:	f7ff fedf 	bl	80028a4 <_printf_common>
 8002ae6:	3001      	adds	r0, #1
 8002ae8:	d14c      	bne.n	8002b84 <_printf_i+0x200>
 8002aea:	f04f 30ff 	mov.w	r0, #4294967295
 8002aee:	b004      	add	sp, #16
 8002af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af4:	4834      	ldr	r0, [pc, #208]	; (8002bc8 <_printf_i+0x244>)
 8002af6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002afa:	6829      	ldr	r1, [r5, #0]
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b02:	6029      	str	r1, [r5, #0]
 8002b04:	061d      	lsls	r5, r3, #24
 8002b06:	d514      	bpl.n	8002b32 <_printf_i+0x1ae>
 8002b08:	07df      	lsls	r7, r3, #31
 8002b0a:	bf44      	itt	mi
 8002b0c:	f043 0320 	orrmi.w	r3, r3, #32
 8002b10:	6023      	strmi	r3, [r4, #0]
 8002b12:	b91e      	cbnz	r6, 8002b1c <_printf_i+0x198>
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	f023 0320 	bic.w	r3, r3, #32
 8002b1a:	6023      	str	r3, [r4, #0]
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	e7af      	b.n	8002a80 <_printf_i+0xfc>
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	f043 0320 	orr.w	r3, r3, #32
 8002b26:	6023      	str	r3, [r4, #0]
 8002b28:	2378      	movs	r3, #120	; 0x78
 8002b2a:	4828      	ldr	r0, [pc, #160]	; (8002bcc <_printf_i+0x248>)
 8002b2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b30:	e7e3      	b.n	8002afa <_printf_i+0x176>
 8002b32:	0659      	lsls	r1, r3, #25
 8002b34:	bf48      	it	mi
 8002b36:	b2b6      	uxthmi	r6, r6
 8002b38:	e7e6      	b.n	8002b08 <_printf_i+0x184>
 8002b3a:	4615      	mov	r5, r2
 8002b3c:	e7bb      	b.n	8002ab6 <_printf_i+0x132>
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	6826      	ldr	r6, [r4, #0]
 8002b42:	1d18      	adds	r0, r3, #4
 8002b44:	6961      	ldr	r1, [r4, #20]
 8002b46:	6028      	str	r0, [r5, #0]
 8002b48:	0635      	lsls	r5, r6, #24
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	d501      	bpl.n	8002b52 <_printf_i+0x1ce>
 8002b4e:	6019      	str	r1, [r3, #0]
 8002b50:	e002      	b.n	8002b58 <_printf_i+0x1d4>
 8002b52:	0670      	lsls	r0, r6, #25
 8002b54:	d5fb      	bpl.n	8002b4e <_printf_i+0x1ca>
 8002b56:	8019      	strh	r1, [r3, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	4615      	mov	r5, r2
 8002b5c:	6123      	str	r3, [r4, #16]
 8002b5e:	e7ba      	b.n	8002ad6 <_printf_i+0x152>
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	2100      	movs	r1, #0
 8002b64:	1d1a      	adds	r2, r3, #4
 8002b66:	602a      	str	r2, [r5, #0]
 8002b68:	681d      	ldr	r5, [r3, #0]
 8002b6a:	6862      	ldr	r2, [r4, #4]
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	f000 f82f 	bl	8002bd0 <memchr>
 8002b72:	b108      	cbz	r0, 8002b78 <_printf_i+0x1f4>
 8002b74:	1b40      	subs	r0, r0, r5
 8002b76:	6060      	str	r0, [r4, #4]
 8002b78:	6863      	ldr	r3, [r4, #4]
 8002b7a:	6123      	str	r3, [r4, #16]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b82:	e7a8      	b.n	8002ad6 <_printf_i+0x152>
 8002b84:	462a      	mov	r2, r5
 8002b86:	4649      	mov	r1, r9
 8002b88:	4640      	mov	r0, r8
 8002b8a:	6923      	ldr	r3, [r4, #16]
 8002b8c:	47d0      	blx	sl
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d0ab      	beq.n	8002aea <_printf_i+0x166>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	079b      	lsls	r3, r3, #30
 8002b96:	d413      	bmi.n	8002bc0 <_printf_i+0x23c>
 8002b98:	68e0      	ldr	r0, [r4, #12]
 8002b9a:	9b03      	ldr	r3, [sp, #12]
 8002b9c:	4298      	cmp	r0, r3
 8002b9e:	bfb8      	it	lt
 8002ba0:	4618      	movlt	r0, r3
 8002ba2:	e7a4      	b.n	8002aee <_printf_i+0x16a>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	4649      	mov	r1, r9
 8002baa:	4640      	mov	r0, r8
 8002bac:	47d0      	blx	sl
 8002bae:	3001      	adds	r0, #1
 8002bb0:	d09b      	beq.n	8002aea <_printf_i+0x166>
 8002bb2:	3501      	adds	r5, #1
 8002bb4:	68e3      	ldr	r3, [r4, #12]
 8002bb6:	9903      	ldr	r1, [sp, #12]
 8002bb8:	1a5b      	subs	r3, r3, r1
 8002bba:	42ab      	cmp	r3, r5
 8002bbc:	dcf2      	bgt.n	8002ba4 <_printf_i+0x220>
 8002bbe:	e7eb      	b.n	8002b98 <_printf_i+0x214>
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	f104 0619 	add.w	r6, r4, #25
 8002bc6:	e7f5      	b.n	8002bb4 <_printf_i+0x230>
 8002bc8:	08003035 	.word	0x08003035
 8002bcc:	08003046 	.word	0x08003046

08002bd0 <memchr>:
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	b510      	push	{r4, lr}
 8002bd4:	b2c9      	uxtb	r1, r1
 8002bd6:	4402      	add	r2, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	d101      	bne.n	8002be2 <memchr+0x12>
 8002bde:	2000      	movs	r0, #0
 8002be0:	e003      	b.n	8002bea <memchr+0x1a>
 8002be2:	7804      	ldrb	r4, [r0, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	428c      	cmp	r4, r1
 8002be8:	d1f6      	bne.n	8002bd8 <memchr+0x8>
 8002bea:	bd10      	pop	{r4, pc}

08002bec <memcpy>:
 8002bec:	440a      	add	r2, r1
 8002bee:	4291      	cmp	r1, r2
 8002bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bf4:	d100      	bne.n	8002bf8 <memcpy+0xc>
 8002bf6:	4770      	bx	lr
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bfe:	4291      	cmp	r1, r2
 8002c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c04:	d1f9      	bne.n	8002bfa <memcpy+0xe>
 8002c06:	bd10      	pop	{r4, pc}

08002c08 <memmove>:
 8002c08:	4288      	cmp	r0, r1
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	eb01 0402 	add.w	r4, r1, r2
 8002c10:	d902      	bls.n	8002c18 <memmove+0x10>
 8002c12:	4284      	cmp	r4, r0
 8002c14:	4623      	mov	r3, r4
 8002c16:	d807      	bhi.n	8002c28 <memmove+0x20>
 8002c18:	1e43      	subs	r3, r0, #1
 8002c1a:	42a1      	cmp	r1, r4
 8002c1c:	d008      	beq.n	8002c30 <memmove+0x28>
 8002c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c26:	e7f8      	b.n	8002c1a <memmove+0x12>
 8002c28:	4601      	mov	r1, r0
 8002c2a:	4402      	add	r2, r0
 8002c2c:	428a      	cmp	r2, r1
 8002c2e:	d100      	bne.n	8002c32 <memmove+0x2a>
 8002c30:	bd10      	pop	{r4, pc}
 8002c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c3a:	e7f7      	b.n	8002c2c <memmove+0x24>

08002c3c <_free_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4605      	mov	r5, r0
 8002c40:	2900      	cmp	r1, #0
 8002c42:	d040      	beq.n	8002cc6 <_free_r+0x8a>
 8002c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c48:	1f0c      	subs	r4, r1, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	bfb8      	it	lt
 8002c4e:	18e4      	addlt	r4, r4, r3
 8002c50:	f000 f910 	bl	8002e74 <__malloc_lock>
 8002c54:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <_free_r+0x8c>)
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	b933      	cbnz	r3, 8002c68 <_free_r+0x2c>
 8002c5a:	6063      	str	r3, [r4, #4]
 8002c5c:	6014      	str	r4, [r2, #0]
 8002c5e:	4628      	mov	r0, r5
 8002c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c64:	f000 b90c 	b.w	8002e80 <__malloc_unlock>
 8002c68:	42a3      	cmp	r3, r4
 8002c6a:	d908      	bls.n	8002c7e <_free_r+0x42>
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	1821      	adds	r1, r4, r0
 8002c70:	428b      	cmp	r3, r1
 8002c72:	bf01      	itttt	eq
 8002c74:	6819      	ldreq	r1, [r3, #0]
 8002c76:	685b      	ldreq	r3, [r3, #4]
 8002c78:	1809      	addeq	r1, r1, r0
 8002c7a:	6021      	streq	r1, [r4, #0]
 8002c7c:	e7ed      	b.n	8002c5a <_free_r+0x1e>
 8002c7e:	461a      	mov	r2, r3
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	b10b      	cbz	r3, 8002c88 <_free_r+0x4c>
 8002c84:	42a3      	cmp	r3, r4
 8002c86:	d9fa      	bls.n	8002c7e <_free_r+0x42>
 8002c88:	6811      	ldr	r1, [r2, #0]
 8002c8a:	1850      	adds	r0, r2, r1
 8002c8c:	42a0      	cmp	r0, r4
 8002c8e:	d10b      	bne.n	8002ca8 <_free_r+0x6c>
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	4401      	add	r1, r0
 8002c94:	1850      	adds	r0, r2, r1
 8002c96:	4283      	cmp	r3, r0
 8002c98:	6011      	str	r1, [r2, #0]
 8002c9a:	d1e0      	bne.n	8002c5e <_free_r+0x22>
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4401      	add	r1, r0
 8002ca2:	6011      	str	r1, [r2, #0]
 8002ca4:	6053      	str	r3, [r2, #4]
 8002ca6:	e7da      	b.n	8002c5e <_free_r+0x22>
 8002ca8:	d902      	bls.n	8002cb0 <_free_r+0x74>
 8002caa:	230c      	movs	r3, #12
 8002cac:	602b      	str	r3, [r5, #0]
 8002cae:	e7d6      	b.n	8002c5e <_free_r+0x22>
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	1821      	adds	r1, r4, r0
 8002cb4:	428b      	cmp	r3, r1
 8002cb6:	bf01      	itttt	eq
 8002cb8:	6819      	ldreq	r1, [r3, #0]
 8002cba:	685b      	ldreq	r3, [r3, #4]
 8002cbc:	1809      	addeq	r1, r1, r0
 8002cbe:	6021      	streq	r1, [r4, #0]
 8002cc0:	6063      	str	r3, [r4, #4]
 8002cc2:	6054      	str	r4, [r2, #4]
 8002cc4:	e7cb      	b.n	8002c5e <_free_r+0x22>
 8002cc6:	bd38      	pop	{r3, r4, r5, pc}
 8002cc8:	200000f8 	.word	0x200000f8

08002ccc <sbrk_aligned>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4e0e      	ldr	r6, [pc, #56]	; (8002d08 <sbrk_aligned+0x3c>)
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	6831      	ldr	r1, [r6, #0]
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	b911      	cbnz	r1, 8002cde <sbrk_aligned+0x12>
 8002cd8:	f000 f8bc 	bl	8002e54 <_sbrk_r>
 8002cdc:	6030      	str	r0, [r6, #0]
 8002cde:	4621      	mov	r1, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f000 f8b7 	bl	8002e54 <_sbrk_r>
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	d00a      	beq.n	8002d00 <sbrk_aligned+0x34>
 8002cea:	1cc4      	adds	r4, r0, #3
 8002cec:	f024 0403 	bic.w	r4, r4, #3
 8002cf0:	42a0      	cmp	r0, r4
 8002cf2:	d007      	beq.n	8002d04 <sbrk_aligned+0x38>
 8002cf4:	1a21      	subs	r1, r4, r0
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 f8ac 	bl	8002e54 <_sbrk_r>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d101      	bne.n	8002d04 <sbrk_aligned+0x38>
 8002d00:	f04f 34ff 	mov.w	r4, #4294967295
 8002d04:	4620      	mov	r0, r4
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	200000fc 	.word	0x200000fc

08002d0c <_malloc_r>:
 8002d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d10:	1ccd      	adds	r5, r1, #3
 8002d12:	f025 0503 	bic.w	r5, r5, #3
 8002d16:	3508      	adds	r5, #8
 8002d18:	2d0c      	cmp	r5, #12
 8002d1a:	bf38      	it	cc
 8002d1c:	250c      	movcc	r5, #12
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	4607      	mov	r7, r0
 8002d22:	db01      	blt.n	8002d28 <_malloc_r+0x1c>
 8002d24:	42a9      	cmp	r1, r5
 8002d26:	d905      	bls.n	8002d34 <_malloc_r+0x28>
 8002d28:	230c      	movs	r3, #12
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4630      	mov	r0, r6
 8002d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d34:	4e2e      	ldr	r6, [pc, #184]	; (8002df0 <_malloc_r+0xe4>)
 8002d36:	f000 f89d 	bl	8002e74 <__malloc_lock>
 8002d3a:	6833      	ldr	r3, [r6, #0]
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	bb34      	cbnz	r4, 8002d8e <_malloc_r+0x82>
 8002d40:	4629      	mov	r1, r5
 8002d42:	4638      	mov	r0, r7
 8002d44:	f7ff ffc2 	bl	8002ccc <sbrk_aligned>
 8002d48:	1c43      	adds	r3, r0, #1
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	d14d      	bne.n	8002dea <_malloc_r+0xde>
 8002d4e:	6834      	ldr	r4, [r6, #0]
 8002d50:	4626      	mov	r6, r4
 8002d52:	2e00      	cmp	r6, #0
 8002d54:	d140      	bne.n	8002dd8 <_malloc_r+0xcc>
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	eb04 0803 	add.w	r8, r4, r3
 8002d60:	f000 f878 	bl	8002e54 <_sbrk_r>
 8002d64:	4580      	cmp	r8, r0
 8002d66:	d13a      	bne.n	8002dde <_malloc_r+0xd2>
 8002d68:	6821      	ldr	r1, [r4, #0]
 8002d6a:	3503      	adds	r5, #3
 8002d6c:	1a6d      	subs	r5, r5, r1
 8002d6e:	f025 0503 	bic.w	r5, r5, #3
 8002d72:	3508      	adds	r5, #8
 8002d74:	2d0c      	cmp	r5, #12
 8002d76:	bf38      	it	cc
 8002d78:	250c      	movcc	r5, #12
 8002d7a:	4638      	mov	r0, r7
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	f7ff ffa5 	bl	8002ccc <sbrk_aligned>
 8002d82:	3001      	adds	r0, #1
 8002d84:	d02b      	beq.n	8002dde <_malloc_r+0xd2>
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	442b      	add	r3, r5
 8002d8a:	6023      	str	r3, [r4, #0]
 8002d8c:	e00e      	b.n	8002dac <_malloc_r+0xa0>
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	1b52      	subs	r2, r2, r5
 8002d92:	d41e      	bmi.n	8002dd2 <_malloc_r+0xc6>
 8002d94:	2a0b      	cmp	r2, #11
 8002d96:	d916      	bls.n	8002dc6 <_malloc_r+0xba>
 8002d98:	1961      	adds	r1, r4, r5
 8002d9a:	42a3      	cmp	r3, r4
 8002d9c:	6025      	str	r5, [r4, #0]
 8002d9e:	bf18      	it	ne
 8002da0:	6059      	strne	r1, [r3, #4]
 8002da2:	6863      	ldr	r3, [r4, #4]
 8002da4:	bf08      	it	eq
 8002da6:	6031      	streq	r1, [r6, #0]
 8002da8:	5162      	str	r2, [r4, r5]
 8002daa:	604b      	str	r3, [r1, #4]
 8002dac:	4638      	mov	r0, r7
 8002dae:	f104 060b 	add.w	r6, r4, #11
 8002db2:	f000 f865 	bl	8002e80 <__malloc_unlock>
 8002db6:	f026 0607 	bic.w	r6, r6, #7
 8002dba:	1d23      	adds	r3, r4, #4
 8002dbc:	1af2      	subs	r2, r6, r3
 8002dbe:	d0b6      	beq.n	8002d2e <_malloc_r+0x22>
 8002dc0:	1b9b      	subs	r3, r3, r6
 8002dc2:	50a3      	str	r3, [r4, r2]
 8002dc4:	e7b3      	b.n	8002d2e <_malloc_r+0x22>
 8002dc6:	6862      	ldr	r2, [r4, #4]
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	bf0c      	ite	eq
 8002dcc:	6032      	streq	r2, [r6, #0]
 8002dce:	605a      	strne	r2, [r3, #4]
 8002dd0:	e7ec      	b.n	8002dac <_malloc_r+0xa0>
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	6864      	ldr	r4, [r4, #4]
 8002dd6:	e7b2      	b.n	8002d3e <_malloc_r+0x32>
 8002dd8:	4634      	mov	r4, r6
 8002dda:	6876      	ldr	r6, [r6, #4]
 8002ddc:	e7b9      	b.n	8002d52 <_malloc_r+0x46>
 8002dde:	230c      	movs	r3, #12
 8002de0:	4638      	mov	r0, r7
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	f000 f84c 	bl	8002e80 <__malloc_unlock>
 8002de8:	e7a1      	b.n	8002d2e <_malloc_r+0x22>
 8002dea:	6025      	str	r5, [r4, #0]
 8002dec:	e7de      	b.n	8002dac <_malloc_r+0xa0>
 8002dee:	bf00      	nop
 8002df0:	200000f8 	.word	0x200000f8

08002df4 <_realloc_r>:
 8002df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df8:	4680      	mov	r8, r0
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	460e      	mov	r6, r1
 8002dfe:	b921      	cbnz	r1, 8002e0a <_realloc_r+0x16>
 8002e00:	4611      	mov	r1, r2
 8002e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e06:	f7ff bf81 	b.w	8002d0c <_malloc_r>
 8002e0a:	b92a      	cbnz	r2, 8002e18 <_realloc_r+0x24>
 8002e0c:	f7ff ff16 	bl	8002c3c <_free_r>
 8002e10:	4625      	mov	r5, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e18:	f000 f838 	bl	8002e8c <_malloc_usable_size_r>
 8002e1c:	4284      	cmp	r4, r0
 8002e1e:	4607      	mov	r7, r0
 8002e20:	d802      	bhi.n	8002e28 <_realloc_r+0x34>
 8002e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e26:	d812      	bhi.n	8002e4e <_realloc_r+0x5a>
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	f7ff ff6e 	bl	8002d0c <_malloc_r>
 8002e30:	4605      	mov	r5, r0
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d0ed      	beq.n	8002e12 <_realloc_r+0x1e>
 8002e36:	42bc      	cmp	r4, r7
 8002e38:	4622      	mov	r2, r4
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	bf28      	it	cs
 8002e3e:	463a      	movcs	r2, r7
 8002e40:	f7ff fed4 	bl	8002bec <memcpy>
 8002e44:	4631      	mov	r1, r6
 8002e46:	4640      	mov	r0, r8
 8002e48:	f7ff fef8 	bl	8002c3c <_free_r>
 8002e4c:	e7e1      	b.n	8002e12 <_realloc_r+0x1e>
 8002e4e:	4635      	mov	r5, r6
 8002e50:	e7df      	b.n	8002e12 <_realloc_r+0x1e>
	...

08002e54 <_sbrk_r>:
 8002e54:	b538      	push	{r3, r4, r5, lr}
 8002e56:	2300      	movs	r3, #0
 8002e58:	4d05      	ldr	r5, [pc, #20]	; (8002e70 <_sbrk_r+0x1c>)
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	602b      	str	r3, [r5, #0]
 8002e60:	f7fd fc5c 	bl	800071c <_sbrk>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d102      	bne.n	8002e6e <_sbrk_r+0x1a>
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	b103      	cbz	r3, 8002e6e <_sbrk_r+0x1a>
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	20000100 	.word	0x20000100

08002e74 <__malloc_lock>:
 8002e74:	4801      	ldr	r0, [pc, #4]	; (8002e7c <__malloc_lock+0x8>)
 8002e76:	f000 b811 	b.w	8002e9c <__retarget_lock_acquire_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	20000104 	.word	0x20000104

08002e80 <__malloc_unlock>:
 8002e80:	4801      	ldr	r0, [pc, #4]	; (8002e88 <__malloc_unlock+0x8>)
 8002e82:	f000 b80c 	b.w	8002e9e <__retarget_lock_release_recursive>
 8002e86:	bf00      	nop
 8002e88:	20000104 	.word	0x20000104

08002e8c <_malloc_usable_size_r>:
 8002e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e90:	1f18      	subs	r0, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bfbc      	itt	lt
 8002e96:	580b      	ldrlt	r3, [r1, r0]
 8002e98:	18c0      	addlt	r0, r0, r3
 8002e9a:	4770      	bx	lr

08002e9c <__retarget_lock_acquire_recursive>:
 8002e9c:	4770      	bx	lr

08002e9e <__retarget_lock_release_recursive>:
 8002e9e:	4770      	bx	lr

08002ea0 <_init>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	bf00      	nop
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr

08002eac <_fini>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	bf00      	nop
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr
